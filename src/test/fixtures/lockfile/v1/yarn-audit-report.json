{"type":"auditAdvisory","data":{"resolution":{"id":1004946,"path":"lerna>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"3.0.0","paths":["lerna>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/bootstrap>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/bootstrap>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/bootstrap>@lerna/package-graph>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/bootstrap>@lerna/command>@lerna/package-graph>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/add>@lerna/bootstrap>@lerna/command>@lerna/package-graph>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/add>@lerna/bootstrap>@lerna/run-topologically>@lerna/query-graph>@lerna/package-graph>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex"]},{"version":"5.0.0","paths":["lerna>@lerna/cli>yargs>string-width>strip-ansi>ansi-regex","lerna>@lerna/clean>@lerna/prompt>inquirer>string-width>strip-ansi>ansi-regex","lerna>@lerna/publish>@lerna/otplease>@lerna/prompt>inquirer>string-width>strip-ansi>ansi-regex","lerna>@lerna/publish>@lerna/npm-dist-tag>@lerna/otplease>@lerna/prompt>inquirer>string-width>strip-ansi>ansi-regex"]}],"metadata":null,"vulnerable_versions":">2.1.1 <5.0.1","module_name":"ansi-regex","severity":"moderate","github_advisory_id":"GHSA-93q8-gq69-wqmw","cves":["CVE-2021-3807"],"access":"public","patched_versions":">=5.0.1","updated":"2021-09-23T15:45:50.000Z","recommendation":"Upgrade to version 5.0.1 or later","cwe":"CWE-918","found_by":null,"deleted":null,"id":1004946,"references":"- https://nvd.nist.gov/vuln/detail/CVE-2021-3807\n- https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9\n- https://huntr.dev/bounties/5b3cf33b-ede0-4398-9974-800876dfd994\n- https://github.com/chalk/ansi-regex/issues/38#issuecomment-924086311\n- https://app.snyk.io/vuln/SNYK-JS-ANSIREGEX-1583908\n- https://github.com/chalk/ansi-regex/issues/38#issuecomment-925924774\n- https://github.com/advisories/GHSA-93q8-gq69-wqmw","created":"2021-11-18T16:00:48.472Z","reported_by":null,"title":" Inefficient Regular Expression Complexity in chalk/ansi-regex","npm_advisory_id":null,"overview":"ansi-regex is vulnerable to Inefficient Regular Expression Complexity","url":"https://github.com/advisories/GHSA-93q8-gq69-wqmw"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1004946,"path":"lerna>@lerna/bootstrap>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"3.0.0","paths":["lerna>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/bootstrap>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/bootstrap>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/bootstrap>@lerna/package-graph>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/bootstrap>@lerna/command>@lerna/package-graph>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/add>@lerna/bootstrap>@lerna/command>@lerna/package-graph>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/add>@lerna/bootstrap>@lerna/run-topologically>@lerna/query-graph>@lerna/package-graph>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex"]},{"version":"5.0.0","paths":["lerna>@lerna/cli>yargs>string-width>strip-ansi>ansi-regex","lerna>@lerna/clean>@lerna/prompt>inquirer>string-width>strip-ansi>ansi-regex","lerna>@lerna/publish>@lerna/otplease>@lerna/prompt>inquirer>string-width>strip-ansi>ansi-regex","lerna>@lerna/publish>@lerna/npm-dist-tag>@lerna/otplease>@lerna/prompt>inquirer>string-width>strip-ansi>ansi-regex"]}],"metadata":null,"vulnerable_versions":">2.1.1 <5.0.1","module_name":"ansi-regex","severity":"moderate","github_advisory_id":"GHSA-93q8-gq69-wqmw","cves":["CVE-2021-3807"],"access":"public","patched_versions":">=5.0.1","updated":"2021-09-23T15:45:50.000Z","recommendation":"Upgrade to version 5.0.1 or later","cwe":"CWE-918","found_by":null,"deleted":null,"id":1004946,"references":"- https://nvd.nist.gov/vuln/detail/CVE-2021-3807\n- https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9\n- https://huntr.dev/bounties/5b3cf33b-ede0-4398-9974-800876dfd994\n- https://github.com/chalk/ansi-regex/issues/38#issuecomment-924086311\n- https://app.snyk.io/vuln/SNYK-JS-ANSIREGEX-1583908\n- https://github.com/chalk/ansi-regex/issues/38#issuecomment-925924774\n- https://github.com/advisories/GHSA-93q8-gq69-wqmw","created":"2021-11-18T16:00:48.472Z","reported_by":null,"title":" Inefficient Regular Expression Complexity in chalk/ansi-regex","npm_advisory_id":null,"overview":"ansi-regex is vulnerable to Inefficient Regular Expression Complexity","url":"https://github.com/advisories/GHSA-93q8-gq69-wqmw"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1004946,"path":"lerna>@lerna/bootstrap>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"3.0.0","paths":["lerna>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/bootstrap>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/bootstrap>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/bootstrap>@lerna/package-graph>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/bootstrap>@lerna/command>@lerna/package-graph>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/add>@lerna/bootstrap>@lerna/command>@lerna/package-graph>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/add>@lerna/bootstrap>@lerna/run-topologically>@lerna/query-graph>@lerna/package-graph>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex"]},{"version":"5.0.0","paths":["lerna>@lerna/cli>yargs>string-width>strip-ansi>ansi-regex","lerna>@lerna/clean>@lerna/prompt>inquirer>string-width>strip-ansi>ansi-regex","lerna>@lerna/publish>@lerna/otplease>@lerna/prompt>inquirer>string-width>strip-ansi>ansi-regex","lerna>@lerna/publish>@lerna/npm-dist-tag>@lerna/otplease>@lerna/prompt>inquirer>string-width>strip-ansi>ansi-regex"]}],"metadata":null,"vulnerable_versions":">2.1.1 <5.0.1","module_name":"ansi-regex","severity":"moderate","github_advisory_id":"GHSA-93q8-gq69-wqmw","cves":["CVE-2021-3807"],"access":"public","patched_versions":">=5.0.1","updated":"2021-09-23T15:45:50.000Z","recommendation":"Upgrade to version 5.0.1 or later","cwe":"CWE-918","found_by":null,"deleted":null,"id":1004946,"references":"- https://nvd.nist.gov/vuln/detail/CVE-2021-3807\n- https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9\n- https://huntr.dev/bounties/5b3cf33b-ede0-4398-9974-800876dfd994\n- https://github.com/chalk/ansi-regex/issues/38#issuecomment-924086311\n- https://app.snyk.io/vuln/SNYK-JS-ANSIREGEX-1583908\n- https://github.com/chalk/ansi-regex/issues/38#issuecomment-925924774\n- https://github.com/advisories/GHSA-93q8-gq69-wqmw","created":"2021-11-18T16:00:48.472Z","reported_by":null,"title":" Inefficient Regular Expression Complexity in chalk/ansi-regex","npm_advisory_id":null,"overview":"ansi-regex is vulnerable to Inefficient Regular Expression Complexity","url":"https://github.com/advisories/GHSA-93q8-gq69-wqmw"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1004946,"path":"lerna>@lerna/bootstrap>@lerna/package-graph>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"3.0.0","paths":["lerna>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/bootstrap>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/bootstrap>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/bootstrap>@lerna/package-graph>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/bootstrap>@lerna/command>@lerna/package-graph>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/add>@lerna/bootstrap>@lerna/command>@lerna/package-graph>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/add>@lerna/bootstrap>@lerna/run-topologically>@lerna/query-graph>@lerna/package-graph>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex"]},{"version":"5.0.0","paths":["lerna>@lerna/cli>yargs>string-width>strip-ansi>ansi-regex","lerna>@lerna/clean>@lerna/prompt>inquirer>string-width>strip-ansi>ansi-regex","lerna>@lerna/publish>@lerna/otplease>@lerna/prompt>inquirer>string-width>strip-ansi>ansi-regex","lerna>@lerna/publish>@lerna/npm-dist-tag>@lerna/otplease>@lerna/prompt>inquirer>string-width>strip-ansi>ansi-regex"]}],"metadata":null,"vulnerable_versions":">2.1.1 <5.0.1","module_name":"ansi-regex","severity":"moderate","github_advisory_id":"GHSA-93q8-gq69-wqmw","cves":["CVE-2021-3807"],"access":"public","patched_versions":">=5.0.1","updated":"2021-09-23T15:45:50.000Z","recommendation":"Upgrade to version 5.0.1 or later","cwe":"CWE-918","found_by":null,"deleted":null,"id":1004946,"references":"- https://nvd.nist.gov/vuln/detail/CVE-2021-3807\n- https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9\n- https://huntr.dev/bounties/5b3cf33b-ede0-4398-9974-800876dfd994\n- https://github.com/chalk/ansi-regex/issues/38#issuecomment-924086311\n- https://app.snyk.io/vuln/SNYK-JS-ANSIREGEX-1583908\n- https://github.com/chalk/ansi-regex/issues/38#issuecomment-925924774\n- https://github.com/advisories/GHSA-93q8-gq69-wqmw","created":"2021-11-18T16:00:48.472Z","reported_by":null,"title":" Inefficient Regular Expression Complexity in chalk/ansi-regex","npm_advisory_id":null,"overview":"ansi-regex is vulnerable to Inefficient Regular Expression Complexity","url":"https://github.com/advisories/GHSA-93q8-gq69-wqmw"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1004946,"path":"lerna>@lerna/bootstrap>@lerna/command>@lerna/package-graph>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"3.0.0","paths":["lerna>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/bootstrap>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/bootstrap>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/bootstrap>@lerna/package-graph>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/bootstrap>@lerna/command>@lerna/package-graph>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/add>@lerna/bootstrap>@lerna/command>@lerna/package-graph>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/add>@lerna/bootstrap>@lerna/run-topologically>@lerna/query-graph>@lerna/package-graph>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex"]},{"version":"5.0.0","paths":["lerna>@lerna/cli>yargs>string-width>strip-ansi>ansi-regex","lerna>@lerna/clean>@lerna/prompt>inquirer>string-width>strip-ansi>ansi-regex","lerna>@lerna/publish>@lerna/otplease>@lerna/prompt>inquirer>string-width>strip-ansi>ansi-regex","lerna>@lerna/publish>@lerna/npm-dist-tag>@lerna/otplease>@lerna/prompt>inquirer>string-width>strip-ansi>ansi-regex"]}],"metadata":null,"vulnerable_versions":">2.1.1 <5.0.1","module_name":"ansi-regex","severity":"moderate","github_advisory_id":"GHSA-93q8-gq69-wqmw","cves":["CVE-2021-3807"],"access":"public","patched_versions":">=5.0.1","updated":"2021-09-23T15:45:50.000Z","recommendation":"Upgrade to version 5.0.1 or later","cwe":"CWE-918","found_by":null,"deleted":null,"id":1004946,"references":"- https://nvd.nist.gov/vuln/detail/CVE-2021-3807\n- https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9\n- https://huntr.dev/bounties/5b3cf33b-ede0-4398-9974-800876dfd994\n- https://github.com/chalk/ansi-regex/issues/38#issuecomment-924086311\n- https://app.snyk.io/vuln/SNYK-JS-ANSIREGEX-1583908\n- https://github.com/chalk/ansi-regex/issues/38#issuecomment-925924774\n- https://github.com/advisories/GHSA-93q8-gq69-wqmw","created":"2021-11-18T16:00:48.472Z","reported_by":null,"title":" Inefficient Regular Expression Complexity in chalk/ansi-regex","npm_advisory_id":null,"overview":"ansi-regex is vulnerable to Inefficient Regular Expression Complexity","url":"https://github.com/advisories/GHSA-93q8-gq69-wqmw"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1004946,"path":"lerna>@lerna/add>@lerna/bootstrap>@lerna/command>@lerna/package-graph>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"3.0.0","paths":["lerna>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/bootstrap>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/bootstrap>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/bootstrap>@lerna/package-graph>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/bootstrap>@lerna/command>@lerna/package-graph>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/add>@lerna/bootstrap>@lerna/command>@lerna/package-graph>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/add>@lerna/bootstrap>@lerna/run-topologically>@lerna/query-graph>@lerna/package-graph>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex"]},{"version":"5.0.0","paths":["lerna>@lerna/cli>yargs>string-width>strip-ansi>ansi-regex","lerna>@lerna/clean>@lerna/prompt>inquirer>string-width>strip-ansi>ansi-regex","lerna>@lerna/publish>@lerna/otplease>@lerna/prompt>inquirer>string-width>strip-ansi>ansi-regex","lerna>@lerna/publish>@lerna/npm-dist-tag>@lerna/otplease>@lerna/prompt>inquirer>string-width>strip-ansi>ansi-regex"]}],"metadata":null,"vulnerable_versions":">2.1.1 <5.0.1","module_name":"ansi-regex","severity":"moderate","github_advisory_id":"GHSA-93q8-gq69-wqmw","cves":["CVE-2021-3807"],"access":"public","patched_versions":">=5.0.1","updated":"2021-09-23T15:45:50.000Z","recommendation":"Upgrade to version 5.0.1 or later","cwe":"CWE-918","found_by":null,"deleted":null,"id":1004946,"references":"- https://nvd.nist.gov/vuln/detail/CVE-2021-3807\n- https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9\n- https://huntr.dev/bounties/5b3cf33b-ede0-4398-9974-800876dfd994\n- https://github.com/chalk/ansi-regex/issues/38#issuecomment-924086311\n- https://app.snyk.io/vuln/SNYK-JS-ANSIREGEX-1583908\n- https://github.com/chalk/ansi-regex/issues/38#issuecomment-925924774\n- https://github.com/advisories/GHSA-93q8-gq69-wqmw","created":"2021-11-18T16:00:48.472Z","reported_by":null,"title":" Inefficient Regular Expression Complexity in chalk/ansi-regex","npm_advisory_id":null,"overview":"ansi-regex is vulnerable to Inefficient Regular Expression Complexity","url":"https://github.com/advisories/GHSA-93q8-gq69-wqmw"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1004946,"path":"lerna>@lerna/add>@lerna/bootstrap>@lerna/run-topologically>@lerna/query-graph>@lerna/package-graph>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"3.0.0","paths":["lerna>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/bootstrap>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/bootstrap>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/bootstrap>@lerna/package-graph>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/bootstrap>@lerna/command>@lerna/package-graph>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/add>@lerna/bootstrap>@lerna/command>@lerna/package-graph>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/add>@lerna/bootstrap>@lerna/run-topologically>@lerna/query-graph>@lerna/package-graph>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex"]},{"version":"5.0.0","paths":["lerna>@lerna/cli>yargs>string-width>strip-ansi>ansi-regex","lerna>@lerna/clean>@lerna/prompt>inquirer>string-width>strip-ansi>ansi-regex","lerna>@lerna/publish>@lerna/otplease>@lerna/prompt>inquirer>string-width>strip-ansi>ansi-regex","lerna>@lerna/publish>@lerna/npm-dist-tag>@lerna/otplease>@lerna/prompt>inquirer>string-width>strip-ansi>ansi-regex"]}],"metadata":null,"vulnerable_versions":">2.1.1 <5.0.1","module_name":"ansi-regex","severity":"moderate","github_advisory_id":"GHSA-93q8-gq69-wqmw","cves":["CVE-2021-3807"],"access":"public","patched_versions":">=5.0.1","updated":"2021-09-23T15:45:50.000Z","recommendation":"Upgrade to version 5.0.1 or later","cwe":"CWE-918","found_by":null,"deleted":null,"id":1004946,"references":"- https://nvd.nist.gov/vuln/detail/CVE-2021-3807\n- https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9\n- https://huntr.dev/bounties/5b3cf33b-ede0-4398-9974-800876dfd994\n- https://github.com/chalk/ansi-regex/issues/38#issuecomment-924086311\n- https://app.snyk.io/vuln/SNYK-JS-ANSIREGEX-1583908\n- https://github.com/chalk/ansi-regex/issues/38#issuecomment-925924774\n- https://github.com/advisories/GHSA-93q8-gq69-wqmw","created":"2021-11-18T16:00:48.472Z","reported_by":null,"title":" Inefficient Regular Expression Complexity in chalk/ansi-regex","npm_advisory_id":null,"overview":"ansi-regex is vulnerable to Inefficient Regular Expression Complexity","url":"https://github.com/advisories/GHSA-93q8-gq69-wqmw"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1004946,"path":"lerna>@lerna/cli>yargs>string-width>strip-ansi>ansi-regex","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"3.0.0","paths":["lerna>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/bootstrap>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/bootstrap>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/bootstrap>@lerna/package-graph>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/bootstrap>@lerna/command>@lerna/package-graph>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/add>@lerna/bootstrap>@lerna/command>@lerna/package-graph>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/add>@lerna/bootstrap>@lerna/run-topologically>@lerna/query-graph>@lerna/package-graph>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex"]},{"version":"5.0.0","paths":["lerna>@lerna/cli>yargs>string-width>strip-ansi>ansi-regex","lerna>@lerna/clean>@lerna/prompt>inquirer>string-width>strip-ansi>ansi-regex","lerna>@lerna/publish>@lerna/otplease>@lerna/prompt>inquirer>string-width>strip-ansi>ansi-regex","lerna>@lerna/publish>@lerna/npm-dist-tag>@lerna/otplease>@lerna/prompt>inquirer>string-width>strip-ansi>ansi-regex"]}],"metadata":null,"vulnerable_versions":">2.1.1 <5.0.1","module_name":"ansi-regex","severity":"moderate","github_advisory_id":"GHSA-93q8-gq69-wqmw","cves":["CVE-2021-3807"],"access":"public","patched_versions":">=5.0.1","updated":"2021-09-23T15:45:50.000Z","recommendation":"Upgrade to version 5.0.1 or later","cwe":"CWE-918","found_by":null,"deleted":null,"id":1004946,"references":"- https://nvd.nist.gov/vuln/detail/CVE-2021-3807\n- https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9\n- https://huntr.dev/bounties/5b3cf33b-ede0-4398-9974-800876dfd994\n- https://github.com/chalk/ansi-regex/issues/38#issuecomment-924086311\n- https://app.snyk.io/vuln/SNYK-JS-ANSIREGEX-1583908\n- https://github.com/chalk/ansi-regex/issues/38#issuecomment-925924774\n- https://github.com/advisories/GHSA-93q8-gq69-wqmw","created":"2021-11-18T16:00:48.472Z","reported_by":null,"title":" Inefficient Regular Expression Complexity in chalk/ansi-regex","npm_advisory_id":null,"overview":"ansi-regex is vulnerable to Inefficient Regular Expression Complexity","url":"https://github.com/advisories/GHSA-93q8-gq69-wqmw"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1004946,"path":"lerna>@lerna/clean>@lerna/prompt>inquirer>string-width>strip-ansi>ansi-regex","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"3.0.0","paths":["lerna>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/bootstrap>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/bootstrap>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/bootstrap>@lerna/package-graph>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/bootstrap>@lerna/command>@lerna/package-graph>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/add>@lerna/bootstrap>@lerna/command>@lerna/package-graph>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/add>@lerna/bootstrap>@lerna/run-topologically>@lerna/query-graph>@lerna/package-graph>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex"]},{"version":"5.0.0","paths":["lerna>@lerna/cli>yargs>string-width>strip-ansi>ansi-regex","lerna>@lerna/clean>@lerna/prompt>inquirer>string-width>strip-ansi>ansi-regex","lerna>@lerna/publish>@lerna/otplease>@lerna/prompt>inquirer>string-width>strip-ansi>ansi-regex","lerna>@lerna/publish>@lerna/npm-dist-tag>@lerna/otplease>@lerna/prompt>inquirer>string-width>strip-ansi>ansi-regex"]}],"metadata":null,"vulnerable_versions":">2.1.1 <5.0.1","module_name":"ansi-regex","severity":"moderate","github_advisory_id":"GHSA-93q8-gq69-wqmw","cves":["CVE-2021-3807"],"access":"public","patched_versions":">=5.0.1","updated":"2021-09-23T15:45:50.000Z","recommendation":"Upgrade to version 5.0.1 or later","cwe":"CWE-918","found_by":null,"deleted":null,"id":1004946,"references":"- https://nvd.nist.gov/vuln/detail/CVE-2021-3807\n- https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9\n- https://huntr.dev/bounties/5b3cf33b-ede0-4398-9974-800876dfd994\n- https://github.com/chalk/ansi-regex/issues/38#issuecomment-924086311\n- https://app.snyk.io/vuln/SNYK-JS-ANSIREGEX-1583908\n- https://github.com/chalk/ansi-regex/issues/38#issuecomment-925924774\n- https://github.com/advisories/GHSA-93q8-gq69-wqmw","created":"2021-11-18T16:00:48.472Z","reported_by":null,"title":" Inefficient Regular Expression Complexity in chalk/ansi-regex","npm_advisory_id":null,"overview":"ansi-regex is vulnerable to Inefficient Regular Expression Complexity","url":"https://github.com/advisories/GHSA-93q8-gq69-wqmw"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1004946,"path":"lerna>@lerna/publish>@lerna/otplease>@lerna/prompt>inquirer>string-width>strip-ansi>ansi-regex","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"3.0.0","paths":["lerna>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/bootstrap>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/bootstrap>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/bootstrap>@lerna/package-graph>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/bootstrap>@lerna/command>@lerna/package-graph>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/add>@lerna/bootstrap>@lerna/command>@lerna/package-graph>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/add>@lerna/bootstrap>@lerna/run-topologically>@lerna/query-graph>@lerna/package-graph>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex"]},{"version":"5.0.0","paths":["lerna>@lerna/cli>yargs>string-width>strip-ansi>ansi-regex","lerna>@lerna/clean>@lerna/prompt>inquirer>string-width>strip-ansi>ansi-regex","lerna>@lerna/publish>@lerna/otplease>@lerna/prompt>inquirer>string-width>strip-ansi>ansi-regex","lerna>@lerna/publish>@lerna/npm-dist-tag>@lerna/otplease>@lerna/prompt>inquirer>string-width>strip-ansi>ansi-regex"]}],"metadata":null,"vulnerable_versions":">2.1.1 <5.0.1","module_name":"ansi-regex","severity":"moderate","github_advisory_id":"GHSA-93q8-gq69-wqmw","cves":["CVE-2021-3807"],"access":"public","patched_versions":">=5.0.1","updated":"2021-09-23T15:45:50.000Z","recommendation":"Upgrade to version 5.0.1 or later","cwe":"CWE-918","found_by":null,"deleted":null,"id":1004946,"references":"- https://nvd.nist.gov/vuln/detail/CVE-2021-3807\n- https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9\n- https://huntr.dev/bounties/5b3cf33b-ede0-4398-9974-800876dfd994\n- https://github.com/chalk/ansi-regex/issues/38#issuecomment-924086311\n- https://app.snyk.io/vuln/SNYK-JS-ANSIREGEX-1583908\n- https://github.com/chalk/ansi-regex/issues/38#issuecomment-925924774\n- https://github.com/advisories/GHSA-93q8-gq69-wqmw","created":"2021-11-18T16:00:48.472Z","reported_by":null,"title":" Inefficient Regular Expression Complexity in chalk/ansi-regex","npm_advisory_id":null,"overview":"ansi-regex is vulnerable to Inefficient Regular Expression Complexity","url":"https://github.com/advisories/GHSA-93q8-gq69-wqmw"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1004946,"path":"lerna>@lerna/publish>@lerna/npm-dist-tag>@lerna/otplease>@lerna/prompt>inquirer>string-width>strip-ansi>ansi-regex","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"3.0.0","paths":["lerna>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/bootstrap>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/bootstrap>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/bootstrap>@lerna/package-graph>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/bootstrap>@lerna/command>@lerna/package-graph>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/add>@lerna/bootstrap>@lerna/command>@lerna/package-graph>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex","lerna>@lerna/add>@lerna/bootstrap>@lerna/run-topologically>@lerna/query-graph>@lerna/package-graph>@lerna/validation-error>npmlog>gauge>wide-align>string-width>strip-ansi>ansi-regex"]},{"version":"5.0.0","paths":["lerna>@lerna/cli>yargs>string-width>strip-ansi>ansi-regex","lerna>@lerna/clean>@lerna/prompt>inquirer>string-width>strip-ansi>ansi-regex","lerna>@lerna/publish>@lerna/otplease>@lerna/prompt>inquirer>string-width>strip-ansi>ansi-regex","lerna>@lerna/publish>@lerna/npm-dist-tag>@lerna/otplease>@lerna/prompt>inquirer>string-width>strip-ansi>ansi-regex"]}],"metadata":null,"vulnerable_versions":">2.1.1 <5.0.1","module_name":"ansi-regex","severity":"moderate","github_advisory_id":"GHSA-93q8-gq69-wqmw","cves":["CVE-2021-3807"],"access":"public","patched_versions":">=5.0.1","updated":"2021-09-23T15:45:50.000Z","recommendation":"Upgrade to version 5.0.1 or later","cwe":"CWE-918","found_by":null,"deleted":null,"id":1004946,"references":"- https://nvd.nist.gov/vuln/detail/CVE-2021-3807\n- https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9\n- https://huntr.dev/bounties/5b3cf33b-ede0-4398-9974-800876dfd994\n- https://github.com/chalk/ansi-regex/issues/38#issuecomment-924086311\n- https://app.snyk.io/vuln/SNYK-JS-ANSIREGEX-1583908\n- https://github.com/chalk/ansi-regex/issues/38#issuecomment-925924774\n- https://github.com/advisories/GHSA-93q8-gq69-wqmw","created":"2021-11-18T16:00:48.472Z","reported_by":null,"title":" Inefficient Regular Expression Complexity in chalk/ansi-regex","npm_advisory_id":null,"overview":"ansi-regex is vulnerable to Inefficient Regular Expression Complexity","url":"https://github.com/advisories/GHSA-93q8-gq69-wqmw"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1005038,"path":"lerna>@lerna/add>pacote>tar","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"6.1.0","paths":["lerna>@lerna/add>pacote>tar","lerna>@lerna/add>pacote>cacache>tar","lerna>@lerna/add>pacote>@npmcli/run-script>node-gyp>tar","lerna>@lerna/add>pacote>npm-registry-fetch>make-fetch-happen>cacache>tar","lerna>@lerna/publish>@lerna/npm-publish>libnpmpublish>npm-registry-fetch>make-fetch-happen>cacache>tar"]}],"metadata":null,"vulnerable_versions":">=6.0.0 <6.1.9","module_name":"tar","severity":"high","github_advisory_id":"GHSA-5955-9wpr-37jh","cves":["CVE-2021-37713"],"access":"public","patched_versions":">=6.1.9","updated":"2021-08-31T16:02:33.000Z","recommendation":"Upgrade to version 6.1.9 or later","cwe":"CWE-22","found_by":null,"deleted":null,"id":1005038,"references":"- https://github.com/npm/node-tar/security/advisories/GHSA-5955-9wpr-37jh\n- https://www.npmjs.com/package/tar\n- https://nvd.nist.gov/vuln/detail/CVE-2021-37713\n- https://www.oracle.com/security-alerts/cpuoct2021.html\n- https://github.com/advisories/GHSA-5955-9wpr-37jh","created":"2021-11-18T16:00:48.492Z","reported_by":null,"title":"Arbitrary File Creation/Overwrite on Windows via insufficient relative path sanitization","npm_advisory_id":null,"overview":"### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\nnode-tar aims to guarantee that any file whose location would be outside of the extraction target directory is not extracted. This is, in part, accomplished by sanitizing absolute paths of entries within the archive, skipping archive entries that contain `..` path portions, and resolving the sanitized paths against the extraction target directory.\n\nThis logic was insufficient on Windows systems when extracting tar files that contained a path that was not an absolute path, but specified a drive letter different from the extraction target, such as `C:some\\path`.  If the drive letter does not match the extraction target, for example `D:\\extraction\\dir`, then the result of `path.resolve(extractionDirectory, entryPath)` would resolve against the current working directory on the `C:` drive, rather than the extraction target directory.\n\nAdditionally, a `..` portion of the path could occur immediately after the drive letter, such as `C:../foo`, and was not properly sanitized by the logic that checked for `..` within the normalized and split portions of the path.\n\nThis only affects users of `node-tar` on Windows systems.\n\n### Patches\n\n4.4.18 || 5.0.10 || 6.1.9\n\n### Workarounds\n\nThere is no reasonable way to work around this issue without performing the same path normalization procedures that node-tar now does.\n\nUsers are encouraged to upgrade to the latest patched versions of node-tar, rather than attempt to sanitize paths themselves.\n\n### Fix\n\nThe fixed versions strip path roots from all paths prior to being resolved against the extraction target folder, even if such paths are not \"absolute\".\n\nAdditionally, a path starting with a drive letter and then two dots, like `c:../`, would bypass the check for `..` path portions.  This is checked properly in the patched versions.\n\nFinally, a defense in depth check is added, such that if the `entry.absolute` is outside of the extraction taret, and we are not in preservePaths:true mode, a warning is raised on that entry, and it is skipped.  Currently, it is believed that this check is redundant, but it did catch some oversights in development.\n","url":"https://github.com/advisories/GHSA-5955-9wpr-37jh"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1005038,"path":"lerna>@lerna/add>pacote>cacache>tar","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"6.1.0","paths":["lerna>@lerna/add>pacote>tar","lerna>@lerna/add>pacote>cacache>tar","lerna>@lerna/add>pacote>@npmcli/run-script>node-gyp>tar","lerna>@lerna/add>pacote>npm-registry-fetch>make-fetch-happen>cacache>tar","lerna>@lerna/publish>@lerna/npm-publish>libnpmpublish>npm-registry-fetch>make-fetch-happen>cacache>tar"]}],"metadata":null,"vulnerable_versions":">=6.0.0 <6.1.9","module_name":"tar","severity":"high","github_advisory_id":"GHSA-5955-9wpr-37jh","cves":["CVE-2021-37713"],"access":"public","patched_versions":">=6.1.9","updated":"2021-08-31T16:02:33.000Z","recommendation":"Upgrade to version 6.1.9 or later","cwe":"CWE-22","found_by":null,"deleted":null,"id":1005038,"references":"- https://github.com/npm/node-tar/security/advisories/GHSA-5955-9wpr-37jh\n- https://www.npmjs.com/package/tar\n- https://nvd.nist.gov/vuln/detail/CVE-2021-37713\n- https://www.oracle.com/security-alerts/cpuoct2021.html\n- https://github.com/advisories/GHSA-5955-9wpr-37jh","created":"2021-11-18T16:00:48.492Z","reported_by":null,"title":"Arbitrary File Creation/Overwrite on Windows via insufficient relative path sanitization","npm_advisory_id":null,"overview":"### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\nnode-tar aims to guarantee that any file whose location would be outside of the extraction target directory is not extracted. This is, in part, accomplished by sanitizing absolute paths of entries within the archive, skipping archive entries that contain `..` path portions, and resolving the sanitized paths against the extraction target directory.\n\nThis logic was insufficient on Windows systems when extracting tar files that contained a path that was not an absolute path, but specified a drive letter different from the extraction target, such as `C:some\\path`.  If the drive letter does not match the extraction target, for example `D:\\extraction\\dir`, then the result of `path.resolve(extractionDirectory, entryPath)` would resolve against the current working directory on the `C:` drive, rather than the extraction target directory.\n\nAdditionally, a `..` portion of the path could occur immediately after the drive letter, such as `C:../foo`, and was not properly sanitized by the logic that checked for `..` within the normalized and split portions of the path.\n\nThis only affects users of `node-tar` on Windows systems.\n\n### Patches\n\n4.4.18 || 5.0.10 || 6.1.9\n\n### Workarounds\n\nThere is no reasonable way to work around this issue without performing the same path normalization procedures that node-tar now does.\n\nUsers are encouraged to upgrade to the latest patched versions of node-tar, rather than attempt to sanitize paths themselves.\n\n### Fix\n\nThe fixed versions strip path roots from all paths prior to being resolved against the extraction target folder, even if such paths are not \"absolute\".\n\nAdditionally, a path starting with a drive letter and then two dots, like `c:../`, would bypass the check for `..` path portions.  This is checked properly in the patched versions.\n\nFinally, a defense in depth check is added, such that if the `entry.absolute` is outside of the extraction taret, and we are not in preservePaths:true mode, a warning is raised on that entry, and it is skipped.  Currently, it is believed that this check is redundant, but it did catch some oversights in development.\n","url":"https://github.com/advisories/GHSA-5955-9wpr-37jh"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1005038,"path":"lerna>@lerna/add>pacote>@npmcli/run-script>node-gyp>tar","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"6.1.0","paths":["lerna>@lerna/add>pacote>tar","lerna>@lerna/add>pacote>cacache>tar","lerna>@lerna/add>pacote>@npmcli/run-script>node-gyp>tar","lerna>@lerna/add>pacote>npm-registry-fetch>make-fetch-happen>cacache>tar","lerna>@lerna/publish>@lerna/npm-publish>libnpmpublish>npm-registry-fetch>make-fetch-happen>cacache>tar"]}],"metadata":null,"vulnerable_versions":">=6.0.0 <6.1.9","module_name":"tar","severity":"high","github_advisory_id":"GHSA-5955-9wpr-37jh","cves":["CVE-2021-37713"],"access":"public","patched_versions":">=6.1.9","updated":"2021-08-31T16:02:33.000Z","recommendation":"Upgrade to version 6.1.9 or later","cwe":"CWE-22","found_by":null,"deleted":null,"id":1005038,"references":"- https://github.com/npm/node-tar/security/advisories/GHSA-5955-9wpr-37jh\n- https://www.npmjs.com/package/tar\n- https://nvd.nist.gov/vuln/detail/CVE-2021-37713\n- https://www.oracle.com/security-alerts/cpuoct2021.html\n- https://github.com/advisories/GHSA-5955-9wpr-37jh","created":"2021-11-18T16:00:48.492Z","reported_by":null,"title":"Arbitrary File Creation/Overwrite on Windows via insufficient relative path sanitization","npm_advisory_id":null,"overview":"### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\nnode-tar aims to guarantee that any file whose location would be outside of the extraction target directory is not extracted. This is, in part, accomplished by sanitizing absolute paths of entries within the archive, skipping archive entries that contain `..` path portions, and resolving the sanitized paths against the extraction target directory.\n\nThis logic was insufficient on Windows systems when extracting tar files that contained a path that was not an absolute path, but specified a drive letter different from the extraction target, such as `C:some\\path`.  If the drive letter does not match the extraction target, for example `D:\\extraction\\dir`, then the result of `path.resolve(extractionDirectory, entryPath)` would resolve against the current working directory on the `C:` drive, rather than the extraction target directory.\n\nAdditionally, a `..` portion of the path could occur immediately after the drive letter, such as `C:../foo`, and was not properly sanitized by the logic that checked for `..` within the normalized and split portions of the path.\n\nThis only affects users of `node-tar` on Windows systems.\n\n### Patches\n\n4.4.18 || 5.0.10 || 6.1.9\n\n### Workarounds\n\nThere is no reasonable way to work around this issue without performing the same path normalization procedures that node-tar now does.\n\nUsers are encouraged to upgrade to the latest patched versions of node-tar, rather than attempt to sanitize paths themselves.\n\n### Fix\n\nThe fixed versions strip path roots from all paths prior to being resolved against the extraction target folder, even if such paths are not \"absolute\".\n\nAdditionally, a path starting with a drive letter and then two dots, like `c:../`, would bypass the check for `..` path portions.  This is checked properly in the patched versions.\n\nFinally, a defense in depth check is added, such that if the `entry.absolute` is outside of the extraction taret, and we are not in preservePaths:true mode, a warning is raised on that entry, and it is skipped.  Currently, it is believed that this check is redundant, but it did catch some oversights in development.\n","url":"https://github.com/advisories/GHSA-5955-9wpr-37jh"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1005038,"path":"lerna>@lerna/add>pacote>npm-registry-fetch>make-fetch-happen>cacache>tar","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"6.1.0","paths":["lerna>@lerna/add>pacote>tar","lerna>@lerna/add>pacote>cacache>tar","lerna>@lerna/add>pacote>@npmcli/run-script>node-gyp>tar","lerna>@lerna/add>pacote>npm-registry-fetch>make-fetch-happen>cacache>tar","lerna>@lerna/publish>@lerna/npm-publish>libnpmpublish>npm-registry-fetch>make-fetch-happen>cacache>tar"]}],"metadata":null,"vulnerable_versions":">=6.0.0 <6.1.9","module_name":"tar","severity":"high","github_advisory_id":"GHSA-5955-9wpr-37jh","cves":["CVE-2021-37713"],"access":"public","patched_versions":">=6.1.9","updated":"2021-08-31T16:02:33.000Z","recommendation":"Upgrade to version 6.1.9 or later","cwe":"CWE-22","found_by":null,"deleted":null,"id":1005038,"references":"- https://github.com/npm/node-tar/security/advisories/GHSA-5955-9wpr-37jh\n- https://www.npmjs.com/package/tar\n- https://nvd.nist.gov/vuln/detail/CVE-2021-37713\n- https://www.oracle.com/security-alerts/cpuoct2021.html\n- https://github.com/advisories/GHSA-5955-9wpr-37jh","created":"2021-11-18T16:00:48.492Z","reported_by":null,"title":"Arbitrary File Creation/Overwrite on Windows via insufficient relative path sanitization","npm_advisory_id":null,"overview":"### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\nnode-tar aims to guarantee that any file whose location would be outside of the extraction target directory is not extracted. This is, in part, accomplished by sanitizing absolute paths of entries within the archive, skipping archive entries that contain `..` path portions, and resolving the sanitized paths against the extraction target directory.\n\nThis logic was insufficient on Windows systems when extracting tar files that contained a path that was not an absolute path, but specified a drive letter different from the extraction target, such as `C:some\\path`.  If the drive letter does not match the extraction target, for example `D:\\extraction\\dir`, then the result of `path.resolve(extractionDirectory, entryPath)` would resolve against the current working directory on the `C:` drive, rather than the extraction target directory.\n\nAdditionally, a `..` portion of the path could occur immediately after the drive letter, such as `C:../foo`, and was not properly sanitized by the logic that checked for `..` within the normalized and split portions of the path.\n\nThis only affects users of `node-tar` on Windows systems.\n\n### Patches\n\n4.4.18 || 5.0.10 || 6.1.9\n\n### Workarounds\n\nThere is no reasonable way to work around this issue without performing the same path normalization procedures that node-tar now does.\n\nUsers are encouraged to upgrade to the latest patched versions of node-tar, rather than attempt to sanitize paths themselves.\n\n### Fix\n\nThe fixed versions strip path roots from all paths prior to being resolved against the extraction target folder, even if such paths are not \"absolute\".\n\nAdditionally, a path starting with a drive letter and then two dots, like `c:../`, would bypass the check for `..` path portions.  This is checked properly in the patched versions.\n\nFinally, a defense in depth check is added, such that if the `entry.absolute` is outside of the extraction taret, and we are not in preservePaths:true mode, a warning is raised on that entry, and it is skipped.  Currently, it is believed that this check is redundant, but it did catch some oversights in development.\n","url":"https://github.com/advisories/GHSA-5955-9wpr-37jh"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1005038,"path":"lerna>@lerna/publish>@lerna/npm-publish>libnpmpublish>npm-registry-fetch>make-fetch-happen>cacache>tar","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"6.1.0","paths":["lerna>@lerna/add>pacote>tar","lerna>@lerna/add>pacote>cacache>tar","lerna>@lerna/add>pacote>@npmcli/run-script>node-gyp>tar","lerna>@lerna/add>pacote>npm-registry-fetch>make-fetch-happen>cacache>tar","lerna>@lerna/publish>@lerna/npm-publish>libnpmpublish>npm-registry-fetch>make-fetch-happen>cacache>tar"]}],"metadata":null,"vulnerable_versions":">=6.0.0 <6.1.9","module_name":"tar","severity":"high","github_advisory_id":"GHSA-5955-9wpr-37jh","cves":["CVE-2021-37713"],"access":"public","patched_versions":">=6.1.9","updated":"2021-08-31T16:02:33.000Z","recommendation":"Upgrade to version 6.1.9 or later","cwe":"CWE-22","found_by":null,"deleted":null,"id":1005038,"references":"- https://github.com/npm/node-tar/security/advisories/GHSA-5955-9wpr-37jh\n- https://www.npmjs.com/package/tar\n- https://nvd.nist.gov/vuln/detail/CVE-2021-37713\n- https://www.oracle.com/security-alerts/cpuoct2021.html\n- https://github.com/advisories/GHSA-5955-9wpr-37jh","created":"2021-11-18T16:00:48.492Z","reported_by":null,"title":"Arbitrary File Creation/Overwrite on Windows via insufficient relative path sanitization","npm_advisory_id":null,"overview":"### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\nnode-tar aims to guarantee that any file whose location would be outside of the extraction target directory is not extracted. This is, in part, accomplished by sanitizing absolute paths of entries within the archive, skipping archive entries that contain `..` path portions, and resolving the sanitized paths against the extraction target directory.\n\nThis logic was insufficient on Windows systems when extracting tar files that contained a path that was not an absolute path, but specified a drive letter different from the extraction target, such as `C:some\\path`.  If the drive letter does not match the extraction target, for example `D:\\extraction\\dir`, then the result of `path.resolve(extractionDirectory, entryPath)` would resolve against the current working directory on the `C:` drive, rather than the extraction target directory.\n\nAdditionally, a `..` portion of the path could occur immediately after the drive letter, such as `C:../foo`, and was not properly sanitized by the logic that checked for `..` within the normalized and split portions of the path.\n\nThis only affects users of `node-tar` on Windows systems.\n\n### Patches\n\n4.4.18 || 5.0.10 || 6.1.9\n\n### Workarounds\n\nThere is no reasonable way to work around this issue without performing the same path normalization procedures that node-tar now does.\n\nUsers are encouraged to upgrade to the latest patched versions of node-tar, rather than attempt to sanitize paths themselves.\n\n### Fix\n\nThe fixed versions strip path roots from all paths prior to being resolved against the extraction target folder, even if such paths are not \"absolute\".\n\nAdditionally, a path starting with a drive letter and then two dots, like `c:../`, would bypass the check for `..` path portions.  This is checked properly in the patched versions.\n\nFinally, a defense in depth check is added, such that if the `entry.absolute` is outside of the extraction taret, and we are not in preservePaths:true mode, a warning is raised on that entry, and it is skipped.  Currently, it is believed that this check is redundant, but it did catch some oversights in development.\n","url":"https://github.com/advisories/GHSA-5955-9wpr-37jh"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1005041,"path":"lerna>@lerna/add>pacote>tar","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"6.1.0","paths":["lerna>@lerna/add>pacote>tar","lerna>@lerna/add>pacote>cacache>tar","lerna>@lerna/add>pacote>@npmcli/run-script>node-gyp>tar","lerna>@lerna/add>pacote>npm-registry-fetch>make-fetch-happen>cacache>tar","lerna>@lerna/publish>@lerna/npm-publish>libnpmpublish>npm-registry-fetch>make-fetch-happen>cacache>tar"]}],"metadata":null,"vulnerable_versions":">=6.0.0 <6.1.9","module_name":"tar","severity":"high","github_advisory_id":"GHSA-qq89-hq3f-393p","cves":["CVE-2021-37712"],"access":"public","patched_versions":">=6.1.9","updated":"2021-08-31T16:02:05.000Z","recommendation":"Upgrade to version 6.1.9 or later","cwe":"CWE-22","found_by":null,"deleted":null,"id":1005041,"references":"- https://github.com/npm/node-tar/security/advisories/GHSA-qq89-hq3f-393p\n- https://www.npmjs.com/package/tar\n- https://nvd.nist.gov/vuln/detail/CVE-2021-37712\n- https://www.oracle.com/security-alerts/cpuoct2021.html\n- https://www.debian.org/security/2021/dsa-5008\n- https://github.com/advisories/GHSA-qq89-hq3f-393p","created":"2021-11-18T16:00:48.492Z","reported_by":null,"title":"Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning using symbolic links","npm_advisory_id":null,"overview":"### Impact\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\nnode-tar aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary stat calls to determine whether a given path is a directory, paths are cached when directories are created.\n\nThis logic was insufficient when extracting tar files that contained two directories and a symlink with names containing unicode values that normalized to the same value. Additionally, on Windows systems, long path portions would resolve to the same file system entities as their 8.3 \"short path\" counterparts. A specially crafted tar archive could thus include directories with two forms of the path that resolve to the same file system entity, followed by a symbolic link with a name in the first form, lastly followed by a file using the second form. It led to bypassing node-tar symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.\n\nThe v3 branch of `node-tar` has been deprecated and did not receive patches for these issues. If you are still using a v3 release we recommend you update to a more recent version of `node-tar`. If this is not possible, a workaround is available below.\n\n### Patches\n\n6.1.9 || 5.0.10 || 4.4.18\n\n### Workarounds\n\nUsers may work around this vulnerability without upgrading by creating a custom filter method which prevents the extraction of symbolic links.\n\n```js\nconst tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  filter: (file, entry) => {\n    if (entry.type === 'SymbolicLink') {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n```\n\nUsers are encouraged to upgrade to the latest patched versions, rather than attempt to sanitize tar input themselves.\n\n#### Fix\n\nThe problem is addressed in the following ways, when comparing paths in the directory cache and path reservation systems:\n\n1. The `String.normalize('NFKD')` method is used to first normalize all unicode to its maximally compatible and multi-code-point form.\n2. All slashes are normalized to `/` on Windows systems (on posix systems, `\\` is a valid filename character, and thus left intact).\n3. When a symbolic link is encountered on Windows systems, the entire directory cache is cleared.  Collisions related to use of 8.3 short names to replace directories with other (non-symlink) types of entries may make archives fail to extract properly, but will not result in arbitrary file writes.\n","url":"https://github.com/advisories/GHSA-qq89-hq3f-393p"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1005041,"path":"lerna>@lerna/add>pacote>cacache>tar","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"6.1.0","paths":["lerna>@lerna/add>pacote>tar","lerna>@lerna/add>pacote>cacache>tar","lerna>@lerna/add>pacote>@npmcli/run-script>node-gyp>tar","lerna>@lerna/add>pacote>npm-registry-fetch>make-fetch-happen>cacache>tar","lerna>@lerna/publish>@lerna/npm-publish>libnpmpublish>npm-registry-fetch>make-fetch-happen>cacache>tar"]}],"metadata":null,"vulnerable_versions":">=6.0.0 <6.1.9","module_name":"tar","severity":"high","github_advisory_id":"GHSA-qq89-hq3f-393p","cves":["CVE-2021-37712"],"access":"public","patched_versions":">=6.1.9","updated":"2021-08-31T16:02:05.000Z","recommendation":"Upgrade to version 6.1.9 or later","cwe":"CWE-22","found_by":null,"deleted":null,"id":1005041,"references":"- https://github.com/npm/node-tar/security/advisories/GHSA-qq89-hq3f-393p\n- https://www.npmjs.com/package/tar\n- https://nvd.nist.gov/vuln/detail/CVE-2021-37712\n- https://www.oracle.com/security-alerts/cpuoct2021.html\n- https://www.debian.org/security/2021/dsa-5008\n- https://github.com/advisories/GHSA-qq89-hq3f-393p","created":"2021-11-18T16:00:48.492Z","reported_by":null,"title":"Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning using symbolic links","npm_advisory_id":null,"overview":"### Impact\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\nnode-tar aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary stat calls to determine whether a given path is a directory, paths are cached when directories are created.\n\nThis logic was insufficient when extracting tar files that contained two directories and a symlink with names containing unicode values that normalized to the same value. Additionally, on Windows systems, long path portions would resolve to the same file system entities as their 8.3 \"short path\" counterparts. A specially crafted tar archive could thus include directories with two forms of the path that resolve to the same file system entity, followed by a symbolic link with a name in the first form, lastly followed by a file using the second form. It led to bypassing node-tar symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.\n\nThe v3 branch of `node-tar` has been deprecated and did not receive patches for these issues. If you are still using a v3 release we recommend you update to a more recent version of `node-tar`. If this is not possible, a workaround is available below.\n\n### Patches\n\n6.1.9 || 5.0.10 || 4.4.18\n\n### Workarounds\n\nUsers may work around this vulnerability without upgrading by creating a custom filter method which prevents the extraction of symbolic links.\n\n```js\nconst tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  filter: (file, entry) => {\n    if (entry.type === 'SymbolicLink') {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n```\n\nUsers are encouraged to upgrade to the latest patched versions, rather than attempt to sanitize tar input themselves.\n\n#### Fix\n\nThe problem is addressed in the following ways, when comparing paths in the directory cache and path reservation systems:\n\n1. The `String.normalize('NFKD')` method is used to first normalize all unicode to its maximally compatible and multi-code-point form.\n2. All slashes are normalized to `/` on Windows systems (on posix systems, `\\` is a valid filename character, and thus left intact).\n3. When a symbolic link is encountered on Windows systems, the entire directory cache is cleared.  Collisions related to use of 8.3 short names to replace directories with other (non-symlink) types of entries may make archives fail to extract properly, but will not result in arbitrary file writes.\n","url":"https://github.com/advisories/GHSA-qq89-hq3f-393p"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1005041,"path":"lerna>@lerna/add>pacote>@npmcli/run-script>node-gyp>tar","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"6.1.0","paths":["lerna>@lerna/add>pacote>tar","lerna>@lerna/add>pacote>cacache>tar","lerna>@lerna/add>pacote>@npmcli/run-script>node-gyp>tar","lerna>@lerna/add>pacote>npm-registry-fetch>make-fetch-happen>cacache>tar","lerna>@lerna/publish>@lerna/npm-publish>libnpmpublish>npm-registry-fetch>make-fetch-happen>cacache>tar"]}],"metadata":null,"vulnerable_versions":">=6.0.0 <6.1.9","module_name":"tar","severity":"high","github_advisory_id":"GHSA-qq89-hq3f-393p","cves":["CVE-2021-37712"],"access":"public","patched_versions":">=6.1.9","updated":"2021-08-31T16:02:05.000Z","recommendation":"Upgrade to version 6.1.9 or later","cwe":"CWE-22","found_by":null,"deleted":null,"id":1005041,"references":"- https://github.com/npm/node-tar/security/advisories/GHSA-qq89-hq3f-393p\n- https://www.npmjs.com/package/tar\n- https://nvd.nist.gov/vuln/detail/CVE-2021-37712\n- https://www.oracle.com/security-alerts/cpuoct2021.html\n- https://www.debian.org/security/2021/dsa-5008\n- https://github.com/advisories/GHSA-qq89-hq3f-393p","created":"2021-11-18T16:00:48.492Z","reported_by":null,"title":"Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning using symbolic links","npm_advisory_id":null,"overview":"### Impact\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\nnode-tar aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary stat calls to determine whether a given path is a directory, paths are cached when directories are created.\n\nThis logic was insufficient when extracting tar files that contained two directories and a symlink with names containing unicode values that normalized to the same value. Additionally, on Windows systems, long path portions would resolve to the same file system entities as their 8.3 \"short path\" counterparts. A specially crafted tar archive could thus include directories with two forms of the path that resolve to the same file system entity, followed by a symbolic link with a name in the first form, lastly followed by a file using the second form. It led to bypassing node-tar symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.\n\nThe v3 branch of `node-tar` has been deprecated and did not receive patches for these issues. If you are still using a v3 release we recommend you update to a more recent version of `node-tar`. If this is not possible, a workaround is available below.\n\n### Patches\n\n6.1.9 || 5.0.10 || 4.4.18\n\n### Workarounds\n\nUsers may work around this vulnerability without upgrading by creating a custom filter method which prevents the extraction of symbolic links.\n\n```js\nconst tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  filter: (file, entry) => {\n    if (entry.type === 'SymbolicLink') {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n```\n\nUsers are encouraged to upgrade to the latest patched versions, rather than attempt to sanitize tar input themselves.\n\n#### Fix\n\nThe problem is addressed in the following ways, when comparing paths in the directory cache and path reservation systems:\n\n1. The `String.normalize('NFKD')` method is used to first normalize all unicode to its maximally compatible and multi-code-point form.\n2. All slashes are normalized to `/` on Windows systems (on posix systems, `\\` is a valid filename character, and thus left intact).\n3. When a symbolic link is encountered on Windows systems, the entire directory cache is cleared.  Collisions related to use of 8.3 short names to replace directories with other (non-symlink) types of entries may make archives fail to extract properly, but will not result in arbitrary file writes.\n","url":"https://github.com/advisories/GHSA-qq89-hq3f-393p"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1005041,"path":"lerna>@lerna/add>pacote>npm-registry-fetch>make-fetch-happen>cacache>tar","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"6.1.0","paths":["lerna>@lerna/add>pacote>tar","lerna>@lerna/add>pacote>cacache>tar","lerna>@lerna/add>pacote>@npmcli/run-script>node-gyp>tar","lerna>@lerna/add>pacote>npm-registry-fetch>make-fetch-happen>cacache>tar","lerna>@lerna/publish>@lerna/npm-publish>libnpmpublish>npm-registry-fetch>make-fetch-happen>cacache>tar"]}],"metadata":null,"vulnerable_versions":">=6.0.0 <6.1.9","module_name":"tar","severity":"high","github_advisory_id":"GHSA-qq89-hq3f-393p","cves":["CVE-2021-37712"],"access":"public","patched_versions":">=6.1.9","updated":"2021-08-31T16:02:05.000Z","recommendation":"Upgrade to version 6.1.9 or later","cwe":"CWE-22","found_by":null,"deleted":null,"id":1005041,"references":"- https://github.com/npm/node-tar/security/advisories/GHSA-qq89-hq3f-393p\n- https://www.npmjs.com/package/tar\n- https://nvd.nist.gov/vuln/detail/CVE-2021-37712\n- https://www.oracle.com/security-alerts/cpuoct2021.html\n- https://www.debian.org/security/2021/dsa-5008\n- https://github.com/advisories/GHSA-qq89-hq3f-393p","created":"2021-11-18T16:00:48.492Z","reported_by":null,"title":"Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning using symbolic links","npm_advisory_id":null,"overview":"### Impact\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\nnode-tar aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary stat calls to determine whether a given path is a directory, paths are cached when directories are created.\n\nThis logic was insufficient when extracting tar files that contained two directories and a symlink with names containing unicode values that normalized to the same value. Additionally, on Windows systems, long path portions would resolve to the same file system entities as their 8.3 \"short path\" counterparts. A specially crafted tar archive could thus include directories with two forms of the path that resolve to the same file system entity, followed by a symbolic link with a name in the first form, lastly followed by a file using the second form. It led to bypassing node-tar symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.\n\nThe v3 branch of `node-tar` has been deprecated and did not receive patches for these issues. If you are still using a v3 release we recommend you update to a more recent version of `node-tar`. If this is not possible, a workaround is available below.\n\n### Patches\n\n6.1.9 || 5.0.10 || 4.4.18\n\n### Workarounds\n\nUsers may work around this vulnerability without upgrading by creating a custom filter method which prevents the extraction of symbolic links.\n\n```js\nconst tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  filter: (file, entry) => {\n    if (entry.type === 'SymbolicLink') {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n```\n\nUsers are encouraged to upgrade to the latest patched versions, rather than attempt to sanitize tar input themselves.\n\n#### Fix\n\nThe problem is addressed in the following ways, when comparing paths in the directory cache and path reservation systems:\n\n1. The `String.normalize('NFKD')` method is used to first normalize all unicode to its maximally compatible and multi-code-point form.\n2. All slashes are normalized to `/` on Windows systems (on posix systems, `\\` is a valid filename character, and thus left intact).\n3. When a symbolic link is encountered on Windows systems, the entire directory cache is cleared.  Collisions related to use of 8.3 short names to replace directories with other (non-symlink) types of entries may make archives fail to extract properly, but will not result in arbitrary file writes.\n","url":"https://github.com/advisories/GHSA-qq89-hq3f-393p"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1005041,"path":"lerna>@lerna/publish>@lerna/npm-publish>libnpmpublish>npm-registry-fetch>make-fetch-happen>cacache>tar","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"6.1.0","paths":["lerna>@lerna/add>pacote>tar","lerna>@lerna/add>pacote>cacache>tar","lerna>@lerna/add>pacote>@npmcli/run-script>node-gyp>tar","lerna>@lerna/add>pacote>npm-registry-fetch>make-fetch-happen>cacache>tar","lerna>@lerna/publish>@lerna/npm-publish>libnpmpublish>npm-registry-fetch>make-fetch-happen>cacache>tar"]}],"metadata":null,"vulnerable_versions":">=6.0.0 <6.1.9","module_name":"tar","severity":"high","github_advisory_id":"GHSA-qq89-hq3f-393p","cves":["CVE-2021-37712"],"access":"public","patched_versions":">=6.1.9","updated":"2021-08-31T16:02:05.000Z","recommendation":"Upgrade to version 6.1.9 or later","cwe":"CWE-22","found_by":null,"deleted":null,"id":1005041,"references":"- https://github.com/npm/node-tar/security/advisories/GHSA-qq89-hq3f-393p\n- https://www.npmjs.com/package/tar\n- https://nvd.nist.gov/vuln/detail/CVE-2021-37712\n- https://www.oracle.com/security-alerts/cpuoct2021.html\n- https://www.debian.org/security/2021/dsa-5008\n- https://github.com/advisories/GHSA-qq89-hq3f-393p","created":"2021-11-18T16:00:48.492Z","reported_by":null,"title":"Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning using symbolic links","npm_advisory_id":null,"overview":"### Impact\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\nnode-tar aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary stat calls to determine whether a given path is a directory, paths are cached when directories are created.\n\nThis logic was insufficient when extracting tar files that contained two directories and a symlink with names containing unicode values that normalized to the same value. Additionally, on Windows systems, long path portions would resolve to the same file system entities as their 8.3 \"short path\" counterparts. A specially crafted tar archive could thus include directories with two forms of the path that resolve to the same file system entity, followed by a symbolic link with a name in the first form, lastly followed by a file using the second form. It led to bypassing node-tar symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.\n\nThe v3 branch of `node-tar` has been deprecated and did not receive patches for these issues. If you are still using a v3 release we recommend you update to a more recent version of `node-tar`. If this is not possible, a workaround is available below.\n\n### Patches\n\n6.1.9 || 5.0.10 || 4.4.18\n\n### Workarounds\n\nUsers may work around this vulnerability without upgrading by creating a custom filter method which prevents the extraction of symbolic links.\n\n```js\nconst tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  filter: (file, entry) => {\n    if (entry.type === 'SymbolicLink') {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n```\n\nUsers are encouraged to upgrade to the latest patched versions, rather than attempt to sanitize tar input themselves.\n\n#### Fix\n\nThe problem is addressed in the following ways, when comparing paths in the directory cache and path reservation systems:\n\n1. The `String.normalize('NFKD')` method is used to first normalize all unicode to its maximally compatible and multi-code-point form.\n2. All slashes are normalized to `/` on Windows systems (on posix systems, `\\` is a valid filename character, and thus left intact).\n3. When a symbolic link is encountered on Windows systems, the entire directory cache is cleared.  Collisions related to use of 8.3 short names to replace directories with other (non-symlink) types of entries may make archives fail to extract properly, but will not result in arbitrary file writes.\n","url":"https://github.com/advisories/GHSA-qq89-hq3f-393p"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1005044,"path":"lerna>@lerna/add>pacote>tar","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"6.1.0","paths":["lerna>@lerna/add>pacote>tar","lerna>@lerna/add>pacote>cacache>tar","lerna>@lerna/add>pacote>@npmcli/run-script>node-gyp>tar","lerna>@lerna/add>pacote>npm-registry-fetch>make-fetch-happen>cacache>tar","lerna>@lerna/publish>@lerna/npm-publish>libnpmpublish>npm-registry-fetch>make-fetch-happen>cacache>tar"]}],"metadata":null,"vulnerable_versions":">=6.0.0 <6.1.7","module_name":"tar","severity":"high","github_advisory_id":"GHSA-9r2w-394v-53qc","cves":["CVE-2021-37701"],"access":"public","patched_versions":">=6.1.7","updated":"2021-08-31T16:01:51.000Z","recommendation":"Upgrade to version 6.1.7 or later","cwe":"CWE-22","found_by":null,"deleted":null,"id":1005044,"references":"- https://github.com/npm/node-tar/security/advisories/GHSA-9r2w-394v-53qc\n- https://www.npmjs.com/package/tar\n- https://nvd.nist.gov/vuln/detail/CVE-2021-37701\n- https://www.oracle.com/security-alerts/cpuoct2021.html\n- https://www.debian.org/security/2021/dsa-5008\n- https://github.com/advisories/GHSA-9r2w-394v-53qc","created":"2021-11-18T16:00:48.493Z","reported_by":null,"title":"Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning using symbolic links","npm_advisory_id":null,"overview":"### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\n`node-tar` aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary stat calls to determine whether a given path is a directory, paths are cached when directories are created.\n\nThis logic was insufficient when extracting tar files that contained both a directory and a symlink with the same name as the directory, where the symlink and directory names in the archive entry used backslashes as a path separator on posix systems. The cache checking logic used both `\\` and `/` characters as path separators, however `\\` is a valid filename character on posix systems.\n\nBy first creating a directory, and then replacing that directory with a symlink, it was thus possible to bypass node-tar symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.\n\nAdditionally, a similar confusion could arise on case-insensitive filesystems.  If a tar archive contained a directory at `FOO`, followed by a symbolic link named `foo`, then on case-insensitive file systems, the creation of the symbolic link would remove the directory from the filesystem, but _not_ from the internal directory cache, as it would not be treated as a cache hit.  A subsequent file entry within the `FOO` directory would then be placed in the target of the symbolic link, thinking that the directory had already been created. \n\nThese issues were addressed in releases 4.4.16, 5.0.8 and 6.1.7.\n\nThe v3 branch of `node-tar` has been deprecated and did not receive patches for these issues. If you are still using a v3 release we recommend you update to a more recent version of `node-tar`. If this is not possible, a workaround is available below.\n\n### Patches\n\n4.4.16 || 5.0.8 || 6.1.7\n\n### Workarounds\n\nUsers may work around this vulnerability without upgrading by creating a custom filter method which prevents the extraction of symbolic links.\n\n```js\nconst tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  filter: (file, entry) => {\n    if (entry.type === 'SymbolicLink') {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n```\n\nUsers are encouraged to upgrade to the latest patched versions, rather than attempt to sanitize tar input themselves.\n\n### Fix\n\nThe problem is addressed in the following ways:\n\n1. All paths are normalized to use `/` as a path separator, replacing `\\` with `/` on Windows systems, and leaving `\\` intact in the path on posix systems.  This is performed in depth, at every level of the program where paths are consumed.\n2. Directory cache pruning is performed case-insensitively.  This _may_ result in undue cache misses on case-sensitive file systems, but the performance impact is negligible.\n\n#### Caveat\n\nNote that this means that the `entry` objects exposed in various parts of tar's API will now always use `/` as a path separator, even on Windows systems.  This is not expected to cause problems, as `/` is a valid path separator on Windows systems, but _may_ result in issues if `entry.path` is compared against a path string coming from some other API such as `fs.realpath()` or `path.resolve()`.\n\nUsers are encouraged to always normalize paths using a well-tested method such as `path.resolve()` before comparing paths to one another.","url":"https://github.com/advisories/GHSA-9r2w-394v-53qc"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1005044,"path":"lerna>@lerna/add>pacote>cacache>tar","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"6.1.0","paths":["lerna>@lerna/add>pacote>tar","lerna>@lerna/add>pacote>cacache>tar","lerna>@lerna/add>pacote>@npmcli/run-script>node-gyp>tar","lerna>@lerna/add>pacote>npm-registry-fetch>make-fetch-happen>cacache>tar","lerna>@lerna/publish>@lerna/npm-publish>libnpmpublish>npm-registry-fetch>make-fetch-happen>cacache>tar"]}],"metadata":null,"vulnerable_versions":">=6.0.0 <6.1.7","module_name":"tar","severity":"high","github_advisory_id":"GHSA-9r2w-394v-53qc","cves":["CVE-2021-37701"],"access":"public","patched_versions":">=6.1.7","updated":"2021-08-31T16:01:51.000Z","recommendation":"Upgrade to version 6.1.7 or later","cwe":"CWE-22","found_by":null,"deleted":null,"id":1005044,"references":"- https://github.com/npm/node-tar/security/advisories/GHSA-9r2w-394v-53qc\n- https://www.npmjs.com/package/tar\n- https://nvd.nist.gov/vuln/detail/CVE-2021-37701\n- https://www.oracle.com/security-alerts/cpuoct2021.html\n- https://www.debian.org/security/2021/dsa-5008\n- https://github.com/advisories/GHSA-9r2w-394v-53qc","created":"2021-11-18T16:00:48.493Z","reported_by":null,"title":"Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning using symbolic links","npm_advisory_id":null,"overview":"### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\n`node-tar` aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary stat calls to determine whether a given path is a directory, paths are cached when directories are created.\n\nThis logic was insufficient when extracting tar files that contained both a directory and a symlink with the same name as the directory, where the symlink and directory names in the archive entry used backslashes as a path separator on posix systems. The cache checking logic used both `\\` and `/` characters as path separators, however `\\` is a valid filename character on posix systems.\n\nBy first creating a directory, and then replacing that directory with a symlink, it was thus possible to bypass node-tar symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.\n\nAdditionally, a similar confusion could arise on case-insensitive filesystems.  If a tar archive contained a directory at `FOO`, followed by a symbolic link named `foo`, then on case-insensitive file systems, the creation of the symbolic link would remove the directory from the filesystem, but _not_ from the internal directory cache, as it would not be treated as a cache hit.  A subsequent file entry within the `FOO` directory would then be placed in the target of the symbolic link, thinking that the directory had already been created. \n\nThese issues were addressed in releases 4.4.16, 5.0.8 and 6.1.7.\n\nThe v3 branch of `node-tar` has been deprecated and did not receive patches for these issues. If you are still using a v3 release we recommend you update to a more recent version of `node-tar`. If this is not possible, a workaround is available below.\n\n### Patches\n\n4.4.16 || 5.0.8 || 6.1.7\n\n### Workarounds\n\nUsers may work around this vulnerability without upgrading by creating a custom filter method which prevents the extraction of symbolic links.\n\n```js\nconst tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  filter: (file, entry) => {\n    if (entry.type === 'SymbolicLink') {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n```\n\nUsers are encouraged to upgrade to the latest patched versions, rather than attempt to sanitize tar input themselves.\n\n### Fix\n\nThe problem is addressed in the following ways:\n\n1. All paths are normalized to use `/` as a path separator, replacing `\\` with `/` on Windows systems, and leaving `\\` intact in the path on posix systems.  This is performed in depth, at every level of the program where paths are consumed.\n2. Directory cache pruning is performed case-insensitively.  This _may_ result in undue cache misses on case-sensitive file systems, but the performance impact is negligible.\n\n#### Caveat\n\nNote that this means that the `entry` objects exposed in various parts of tar's API will now always use `/` as a path separator, even on Windows systems.  This is not expected to cause problems, as `/` is a valid path separator on Windows systems, but _may_ result in issues if `entry.path` is compared against a path string coming from some other API such as `fs.realpath()` or `path.resolve()`.\n\nUsers are encouraged to always normalize paths using a well-tested method such as `path.resolve()` before comparing paths to one another.","url":"https://github.com/advisories/GHSA-9r2w-394v-53qc"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1005044,"path":"lerna>@lerna/add>pacote>@npmcli/run-script>node-gyp>tar","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"6.1.0","paths":["lerna>@lerna/add>pacote>tar","lerna>@lerna/add>pacote>cacache>tar","lerna>@lerna/add>pacote>@npmcli/run-script>node-gyp>tar","lerna>@lerna/add>pacote>npm-registry-fetch>make-fetch-happen>cacache>tar","lerna>@lerna/publish>@lerna/npm-publish>libnpmpublish>npm-registry-fetch>make-fetch-happen>cacache>tar"]}],"metadata":null,"vulnerable_versions":">=6.0.0 <6.1.7","module_name":"tar","severity":"high","github_advisory_id":"GHSA-9r2w-394v-53qc","cves":["CVE-2021-37701"],"access":"public","patched_versions":">=6.1.7","updated":"2021-08-31T16:01:51.000Z","recommendation":"Upgrade to version 6.1.7 or later","cwe":"CWE-22","found_by":null,"deleted":null,"id":1005044,"references":"- https://github.com/npm/node-tar/security/advisories/GHSA-9r2w-394v-53qc\n- https://www.npmjs.com/package/tar\n- https://nvd.nist.gov/vuln/detail/CVE-2021-37701\n- https://www.oracle.com/security-alerts/cpuoct2021.html\n- https://www.debian.org/security/2021/dsa-5008\n- https://github.com/advisories/GHSA-9r2w-394v-53qc","created":"2021-11-18T16:00:48.493Z","reported_by":null,"title":"Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning using symbolic links","npm_advisory_id":null,"overview":"### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\n`node-tar` aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary stat calls to determine whether a given path is a directory, paths are cached when directories are created.\n\nThis logic was insufficient when extracting tar files that contained both a directory and a symlink with the same name as the directory, where the symlink and directory names in the archive entry used backslashes as a path separator on posix systems. The cache checking logic used both `\\` and `/` characters as path separators, however `\\` is a valid filename character on posix systems.\n\nBy first creating a directory, and then replacing that directory with a symlink, it was thus possible to bypass node-tar symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.\n\nAdditionally, a similar confusion could arise on case-insensitive filesystems.  If a tar archive contained a directory at `FOO`, followed by a symbolic link named `foo`, then on case-insensitive file systems, the creation of the symbolic link would remove the directory from the filesystem, but _not_ from the internal directory cache, as it would not be treated as a cache hit.  A subsequent file entry within the `FOO` directory would then be placed in the target of the symbolic link, thinking that the directory had already been created. \n\nThese issues were addressed in releases 4.4.16, 5.0.8 and 6.1.7.\n\nThe v3 branch of `node-tar` has been deprecated and did not receive patches for these issues. If you are still using a v3 release we recommend you update to a more recent version of `node-tar`. If this is not possible, a workaround is available below.\n\n### Patches\n\n4.4.16 || 5.0.8 || 6.1.7\n\n### Workarounds\n\nUsers may work around this vulnerability without upgrading by creating a custom filter method which prevents the extraction of symbolic links.\n\n```js\nconst tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  filter: (file, entry) => {\n    if (entry.type === 'SymbolicLink') {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n```\n\nUsers are encouraged to upgrade to the latest patched versions, rather than attempt to sanitize tar input themselves.\n\n### Fix\n\nThe problem is addressed in the following ways:\n\n1. All paths are normalized to use `/` as a path separator, replacing `\\` with `/` on Windows systems, and leaving `\\` intact in the path on posix systems.  This is performed in depth, at every level of the program where paths are consumed.\n2. Directory cache pruning is performed case-insensitively.  This _may_ result in undue cache misses on case-sensitive file systems, but the performance impact is negligible.\n\n#### Caveat\n\nNote that this means that the `entry` objects exposed in various parts of tar's API will now always use `/` as a path separator, even on Windows systems.  This is not expected to cause problems, as `/` is a valid path separator on Windows systems, but _may_ result in issues if `entry.path` is compared against a path string coming from some other API such as `fs.realpath()` or `path.resolve()`.\n\nUsers are encouraged to always normalize paths using a well-tested method such as `path.resolve()` before comparing paths to one another.","url":"https://github.com/advisories/GHSA-9r2w-394v-53qc"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1005044,"path":"lerna>@lerna/add>pacote>npm-registry-fetch>make-fetch-happen>cacache>tar","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"6.1.0","paths":["lerna>@lerna/add>pacote>tar","lerna>@lerna/add>pacote>cacache>tar","lerna>@lerna/add>pacote>@npmcli/run-script>node-gyp>tar","lerna>@lerna/add>pacote>npm-registry-fetch>make-fetch-happen>cacache>tar","lerna>@lerna/publish>@lerna/npm-publish>libnpmpublish>npm-registry-fetch>make-fetch-happen>cacache>tar"]}],"metadata":null,"vulnerable_versions":">=6.0.0 <6.1.7","module_name":"tar","severity":"high","github_advisory_id":"GHSA-9r2w-394v-53qc","cves":["CVE-2021-37701"],"access":"public","patched_versions":">=6.1.7","updated":"2021-08-31T16:01:51.000Z","recommendation":"Upgrade to version 6.1.7 or later","cwe":"CWE-22","found_by":null,"deleted":null,"id":1005044,"references":"- https://github.com/npm/node-tar/security/advisories/GHSA-9r2w-394v-53qc\n- https://www.npmjs.com/package/tar\n- https://nvd.nist.gov/vuln/detail/CVE-2021-37701\n- https://www.oracle.com/security-alerts/cpuoct2021.html\n- https://www.debian.org/security/2021/dsa-5008\n- https://github.com/advisories/GHSA-9r2w-394v-53qc","created":"2021-11-18T16:00:48.493Z","reported_by":null,"title":"Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning using symbolic links","npm_advisory_id":null,"overview":"### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\n`node-tar` aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary stat calls to determine whether a given path is a directory, paths are cached when directories are created.\n\nThis logic was insufficient when extracting tar files that contained both a directory and a symlink with the same name as the directory, where the symlink and directory names in the archive entry used backslashes as a path separator on posix systems. The cache checking logic used both `\\` and `/` characters as path separators, however `\\` is a valid filename character on posix systems.\n\nBy first creating a directory, and then replacing that directory with a symlink, it was thus possible to bypass node-tar symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.\n\nAdditionally, a similar confusion could arise on case-insensitive filesystems.  If a tar archive contained a directory at `FOO`, followed by a symbolic link named `foo`, then on case-insensitive file systems, the creation of the symbolic link would remove the directory from the filesystem, but _not_ from the internal directory cache, as it would not be treated as a cache hit.  A subsequent file entry within the `FOO` directory would then be placed in the target of the symbolic link, thinking that the directory had already been created. \n\nThese issues were addressed in releases 4.4.16, 5.0.8 and 6.1.7.\n\nThe v3 branch of `node-tar` has been deprecated and did not receive patches for these issues. If you are still using a v3 release we recommend you update to a more recent version of `node-tar`. If this is not possible, a workaround is available below.\n\n### Patches\n\n4.4.16 || 5.0.8 || 6.1.7\n\n### Workarounds\n\nUsers may work around this vulnerability without upgrading by creating a custom filter method which prevents the extraction of symbolic links.\n\n```js\nconst tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  filter: (file, entry) => {\n    if (entry.type === 'SymbolicLink') {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n```\n\nUsers are encouraged to upgrade to the latest patched versions, rather than attempt to sanitize tar input themselves.\n\n### Fix\n\nThe problem is addressed in the following ways:\n\n1. All paths are normalized to use `/` as a path separator, replacing `\\` with `/` on Windows systems, and leaving `\\` intact in the path on posix systems.  This is performed in depth, at every level of the program where paths are consumed.\n2. Directory cache pruning is performed case-insensitively.  This _may_ result in undue cache misses on case-sensitive file systems, but the performance impact is negligible.\n\n#### Caveat\n\nNote that this means that the `entry` objects exposed in various parts of tar's API will now always use `/` as a path separator, even on Windows systems.  This is not expected to cause problems, as `/` is a valid path separator on Windows systems, but _may_ result in issues if `entry.path` is compared against a path string coming from some other API such as `fs.realpath()` or `path.resolve()`.\n\nUsers are encouraged to always normalize paths using a well-tested method such as `path.resolve()` before comparing paths to one another.","url":"https://github.com/advisories/GHSA-9r2w-394v-53qc"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1005044,"path":"lerna>@lerna/publish>@lerna/npm-publish>libnpmpublish>npm-registry-fetch>make-fetch-happen>cacache>tar","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"6.1.0","paths":["lerna>@lerna/add>pacote>tar","lerna>@lerna/add>pacote>cacache>tar","lerna>@lerna/add>pacote>@npmcli/run-script>node-gyp>tar","lerna>@lerna/add>pacote>npm-registry-fetch>make-fetch-happen>cacache>tar","lerna>@lerna/publish>@lerna/npm-publish>libnpmpublish>npm-registry-fetch>make-fetch-happen>cacache>tar"]}],"metadata":null,"vulnerable_versions":">=6.0.0 <6.1.7","module_name":"tar","severity":"high","github_advisory_id":"GHSA-9r2w-394v-53qc","cves":["CVE-2021-37701"],"access":"public","patched_versions":">=6.1.7","updated":"2021-08-31T16:01:51.000Z","recommendation":"Upgrade to version 6.1.7 or later","cwe":"CWE-22","found_by":null,"deleted":null,"id":1005044,"references":"- https://github.com/npm/node-tar/security/advisories/GHSA-9r2w-394v-53qc\n- https://www.npmjs.com/package/tar\n- https://nvd.nist.gov/vuln/detail/CVE-2021-37701\n- https://www.oracle.com/security-alerts/cpuoct2021.html\n- https://www.debian.org/security/2021/dsa-5008\n- https://github.com/advisories/GHSA-9r2w-394v-53qc","created":"2021-11-18T16:00:48.493Z","reported_by":null,"title":"Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning using symbolic links","npm_advisory_id":null,"overview":"### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\n`node-tar` aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary stat calls to determine whether a given path is a directory, paths are cached when directories are created.\n\nThis logic was insufficient when extracting tar files that contained both a directory and a symlink with the same name as the directory, where the symlink and directory names in the archive entry used backslashes as a path separator on posix systems. The cache checking logic used both `\\` and `/` characters as path separators, however `\\` is a valid filename character on posix systems.\n\nBy first creating a directory, and then replacing that directory with a symlink, it was thus possible to bypass node-tar symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.\n\nAdditionally, a similar confusion could arise on case-insensitive filesystems.  If a tar archive contained a directory at `FOO`, followed by a symbolic link named `foo`, then on case-insensitive file systems, the creation of the symbolic link would remove the directory from the filesystem, but _not_ from the internal directory cache, as it would not be treated as a cache hit.  A subsequent file entry within the `FOO` directory would then be placed in the target of the symbolic link, thinking that the directory had already been created. \n\nThese issues were addressed in releases 4.4.16, 5.0.8 and 6.1.7.\n\nThe v3 branch of `node-tar` has been deprecated and did not receive patches for these issues. If you are still using a v3 release we recommend you update to a more recent version of `node-tar`. If this is not possible, a workaround is available below.\n\n### Patches\n\n4.4.16 || 5.0.8 || 6.1.7\n\n### Workarounds\n\nUsers may work around this vulnerability without upgrading by creating a custom filter method which prevents the extraction of symbolic links.\n\n```js\nconst tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  filter: (file, entry) => {\n    if (entry.type === 'SymbolicLink') {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n```\n\nUsers are encouraged to upgrade to the latest patched versions, rather than attempt to sanitize tar input themselves.\n\n### Fix\n\nThe problem is addressed in the following ways:\n\n1. All paths are normalized to use `/` as a path separator, replacing `\\` with `/` on Windows systems, and leaving `\\` intact in the path on posix systems.  This is performed in depth, at every level of the program where paths are consumed.\n2. Directory cache pruning is performed case-insensitively.  This _may_ result in undue cache misses on case-sensitive file systems, but the performance impact is negligible.\n\n#### Caveat\n\nNote that this means that the `entry` objects exposed in various parts of tar's API will now always use `/` as a path separator, even on Windows systems.  This is not expected to cause problems, as `/` is a valid path separator on Windows systems, but _may_ result in issues if `entry.path` is compared against a path string coming from some other API such as `fs.realpath()` or `path.resolve()`.\n\nUsers are encouraged to always normalize paths using a well-tested method such as `path.resolve()` before comparing paths to one another.","url":"https://github.com/advisories/GHSA-9r2w-394v-53qc"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1005075,"path":"lerna>@lerna/add>pacote>tar","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"6.1.0","paths":["lerna>@lerna/add>pacote>tar","lerna>@lerna/add>pacote>cacache>tar","lerna>@lerna/add>pacote>@npmcli/run-script>node-gyp>tar","lerna>@lerna/add>pacote>npm-registry-fetch>make-fetch-happen>cacache>tar","lerna>@lerna/publish>@lerna/npm-publish>libnpmpublish>npm-registry-fetch>make-fetch-happen>cacache>tar"]}],"metadata":null,"vulnerable_versions":">=6.0.0 <6.1.1","module_name":"tar","severity":"high","github_advisory_id":"GHSA-3jfq-g458-7qm9","cves":["CVE-2021-32804"],"access":"public","patched_versions":">=6.1.1","updated":"2021-08-03T19:06:16.000Z","recommendation":"Upgrade to version 6.1.1 or later","cwe":"CWE-22","found_by":null,"deleted":null,"id":1005075,"references":"- https://github.com/npm/node-tar/security/advisories/GHSA-3jfq-g458-7qm9\n- https://github.com/npm/node-tar/commit/1f036ca23f64a547bdd6c79c1a44bc62e8115da4\n- https://www.npmjs.com/advisories/1770\n- https://www.npmjs.com/package/tar\n- https://nvd.nist.gov/vuln/detail/CVE-2021-32804\n- https://www.oracle.com/security-alerts/cpuoct2021.html\n- https://github.com/advisories/GHSA-3jfq-g458-7qm9","created":"2021-11-18T16:00:48.497Z","reported_by":null,"title":"Arbitrary File Creation/Overwrite due to insufficient absolute path sanitization","npm_advisory_id":null,"overview":"### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\n`node-tar` aims to prevent extraction of absolute file paths by turning absolute paths into relative paths when the `preservePaths` flag is not set to `true`. This is achieved by stripping the absolute path root from any absolute file paths contained in a tar file. For example `/home/user/.bashrc` would turn into `home/user/.bashrc`. \n\nThis logic was insufficient when file paths contained repeated path roots such as `////home/user/.bashrc`. `node-tar` would only strip a single path root from such paths. When given an absolute file path with repeating path roots, the resulting path (e.g. `///home/user/.bashrc`) would still resolve to an absolute path, thus allowing arbitrary file creation and overwrite. \n\n### Patches\n\n3.2.2 || 4.4.14 || 5.0.6 || 6.1.1\n\nNOTE: an adjacent issue [CVE-2021-32803](https://github.com/npm/node-tar/security/advisories/GHSA-r628-mhmh-qjhw) affects this release level. Please ensure you update to the latest patch levels that address CVE-2021-32803 as well if this adjacent issue affects your `node-tar` use case.\n\n### Workarounds\n\nUsers may work around this vulnerability without upgrading by creating a custom `onentry` method which sanitizes the `entry.path` or a `filter` method which removes entries with absolute paths.\n\n```js\nconst path = require('path')\nconst tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  // either add this function...\n  onentry: (entry) => {\n    if (path.isAbsolute(entry.path)) {\n      entry.path = sanitizeAbsolutePathSomehow(entry.path)\n      entry.absolute = path.resolve(entry.path)\n    }\n  },\n\n  // or this one\n  filter: (file, entry) => {\n    if (path.isAbsolute(entry.path)) {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n```\n\nUsers are encouraged to upgrade to the latest patch versions, rather than attempt to sanitize tar input themselves.","url":"https://github.com/advisories/GHSA-3jfq-g458-7qm9"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1005075,"path":"lerna>@lerna/add>pacote>cacache>tar","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"6.1.0","paths":["lerna>@lerna/add>pacote>tar","lerna>@lerna/add>pacote>cacache>tar","lerna>@lerna/add>pacote>@npmcli/run-script>node-gyp>tar","lerna>@lerna/add>pacote>npm-registry-fetch>make-fetch-happen>cacache>tar","lerna>@lerna/publish>@lerna/npm-publish>libnpmpublish>npm-registry-fetch>make-fetch-happen>cacache>tar"]}],"metadata":null,"vulnerable_versions":">=6.0.0 <6.1.1","module_name":"tar","severity":"high","github_advisory_id":"GHSA-3jfq-g458-7qm9","cves":["CVE-2021-32804"],"access":"public","patched_versions":">=6.1.1","updated":"2021-08-03T19:06:16.000Z","recommendation":"Upgrade to version 6.1.1 or later","cwe":"CWE-22","found_by":null,"deleted":null,"id":1005075,"references":"- https://github.com/npm/node-tar/security/advisories/GHSA-3jfq-g458-7qm9\n- https://github.com/npm/node-tar/commit/1f036ca23f64a547bdd6c79c1a44bc62e8115da4\n- https://www.npmjs.com/advisories/1770\n- https://www.npmjs.com/package/tar\n- https://nvd.nist.gov/vuln/detail/CVE-2021-32804\n- https://www.oracle.com/security-alerts/cpuoct2021.html\n- https://github.com/advisories/GHSA-3jfq-g458-7qm9","created":"2021-11-18T16:00:48.497Z","reported_by":null,"title":"Arbitrary File Creation/Overwrite due to insufficient absolute path sanitization","npm_advisory_id":null,"overview":"### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\n`node-tar` aims to prevent extraction of absolute file paths by turning absolute paths into relative paths when the `preservePaths` flag is not set to `true`. This is achieved by stripping the absolute path root from any absolute file paths contained in a tar file. For example `/home/user/.bashrc` would turn into `home/user/.bashrc`. \n\nThis logic was insufficient when file paths contained repeated path roots such as `////home/user/.bashrc`. `node-tar` would only strip a single path root from such paths. When given an absolute file path with repeating path roots, the resulting path (e.g. `///home/user/.bashrc`) would still resolve to an absolute path, thus allowing arbitrary file creation and overwrite. \n\n### Patches\n\n3.2.2 || 4.4.14 || 5.0.6 || 6.1.1\n\nNOTE: an adjacent issue [CVE-2021-32803](https://github.com/npm/node-tar/security/advisories/GHSA-r628-mhmh-qjhw) affects this release level. Please ensure you update to the latest patch levels that address CVE-2021-32803 as well if this adjacent issue affects your `node-tar` use case.\n\n### Workarounds\n\nUsers may work around this vulnerability without upgrading by creating a custom `onentry` method which sanitizes the `entry.path` or a `filter` method which removes entries with absolute paths.\n\n```js\nconst path = require('path')\nconst tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  // either add this function...\n  onentry: (entry) => {\n    if (path.isAbsolute(entry.path)) {\n      entry.path = sanitizeAbsolutePathSomehow(entry.path)\n      entry.absolute = path.resolve(entry.path)\n    }\n  },\n\n  // or this one\n  filter: (file, entry) => {\n    if (path.isAbsolute(entry.path)) {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n```\n\nUsers are encouraged to upgrade to the latest patch versions, rather than attempt to sanitize tar input themselves.","url":"https://github.com/advisories/GHSA-3jfq-g458-7qm9"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1005075,"path":"lerna>@lerna/add>pacote>@npmcli/run-script>node-gyp>tar","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"6.1.0","paths":["lerna>@lerna/add>pacote>tar","lerna>@lerna/add>pacote>cacache>tar","lerna>@lerna/add>pacote>@npmcli/run-script>node-gyp>tar","lerna>@lerna/add>pacote>npm-registry-fetch>make-fetch-happen>cacache>tar","lerna>@lerna/publish>@lerna/npm-publish>libnpmpublish>npm-registry-fetch>make-fetch-happen>cacache>tar"]}],"metadata":null,"vulnerable_versions":">=6.0.0 <6.1.1","module_name":"tar","severity":"high","github_advisory_id":"GHSA-3jfq-g458-7qm9","cves":["CVE-2021-32804"],"access":"public","patched_versions":">=6.1.1","updated":"2021-08-03T19:06:16.000Z","recommendation":"Upgrade to version 6.1.1 or later","cwe":"CWE-22","found_by":null,"deleted":null,"id":1005075,"references":"- https://github.com/npm/node-tar/security/advisories/GHSA-3jfq-g458-7qm9\n- https://github.com/npm/node-tar/commit/1f036ca23f64a547bdd6c79c1a44bc62e8115da4\n- https://www.npmjs.com/advisories/1770\n- https://www.npmjs.com/package/tar\n- https://nvd.nist.gov/vuln/detail/CVE-2021-32804\n- https://www.oracle.com/security-alerts/cpuoct2021.html\n- https://github.com/advisories/GHSA-3jfq-g458-7qm9","created":"2021-11-18T16:00:48.497Z","reported_by":null,"title":"Arbitrary File Creation/Overwrite due to insufficient absolute path sanitization","npm_advisory_id":null,"overview":"### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\n`node-tar` aims to prevent extraction of absolute file paths by turning absolute paths into relative paths when the `preservePaths` flag is not set to `true`. This is achieved by stripping the absolute path root from any absolute file paths contained in a tar file. For example `/home/user/.bashrc` would turn into `home/user/.bashrc`. \n\nThis logic was insufficient when file paths contained repeated path roots such as `////home/user/.bashrc`. `node-tar` would only strip a single path root from such paths. When given an absolute file path with repeating path roots, the resulting path (e.g. `///home/user/.bashrc`) would still resolve to an absolute path, thus allowing arbitrary file creation and overwrite. \n\n### Patches\n\n3.2.2 || 4.4.14 || 5.0.6 || 6.1.1\n\nNOTE: an adjacent issue [CVE-2021-32803](https://github.com/npm/node-tar/security/advisories/GHSA-r628-mhmh-qjhw) affects this release level. Please ensure you update to the latest patch levels that address CVE-2021-32803 as well if this adjacent issue affects your `node-tar` use case.\n\n### Workarounds\n\nUsers may work around this vulnerability without upgrading by creating a custom `onentry` method which sanitizes the `entry.path` or a `filter` method which removes entries with absolute paths.\n\n```js\nconst path = require('path')\nconst tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  // either add this function...\n  onentry: (entry) => {\n    if (path.isAbsolute(entry.path)) {\n      entry.path = sanitizeAbsolutePathSomehow(entry.path)\n      entry.absolute = path.resolve(entry.path)\n    }\n  },\n\n  // or this one\n  filter: (file, entry) => {\n    if (path.isAbsolute(entry.path)) {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n```\n\nUsers are encouraged to upgrade to the latest patch versions, rather than attempt to sanitize tar input themselves.","url":"https://github.com/advisories/GHSA-3jfq-g458-7qm9"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1005075,"path":"lerna>@lerna/add>pacote>npm-registry-fetch>make-fetch-happen>cacache>tar","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"6.1.0","paths":["lerna>@lerna/add>pacote>tar","lerna>@lerna/add>pacote>cacache>tar","lerna>@lerna/add>pacote>@npmcli/run-script>node-gyp>tar","lerna>@lerna/add>pacote>npm-registry-fetch>make-fetch-happen>cacache>tar","lerna>@lerna/publish>@lerna/npm-publish>libnpmpublish>npm-registry-fetch>make-fetch-happen>cacache>tar"]}],"metadata":null,"vulnerable_versions":">=6.0.0 <6.1.1","module_name":"tar","severity":"high","github_advisory_id":"GHSA-3jfq-g458-7qm9","cves":["CVE-2021-32804"],"access":"public","patched_versions":">=6.1.1","updated":"2021-08-03T19:06:16.000Z","recommendation":"Upgrade to version 6.1.1 or later","cwe":"CWE-22","found_by":null,"deleted":null,"id":1005075,"references":"- https://github.com/npm/node-tar/security/advisories/GHSA-3jfq-g458-7qm9\n- https://github.com/npm/node-tar/commit/1f036ca23f64a547bdd6c79c1a44bc62e8115da4\n- https://www.npmjs.com/advisories/1770\n- https://www.npmjs.com/package/tar\n- https://nvd.nist.gov/vuln/detail/CVE-2021-32804\n- https://www.oracle.com/security-alerts/cpuoct2021.html\n- https://github.com/advisories/GHSA-3jfq-g458-7qm9","created":"2021-11-18T16:00:48.497Z","reported_by":null,"title":"Arbitrary File Creation/Overwrite due to insufficient absolute path sanitization","npm_advisory_id":null,"overview":"### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\n`node-tar` aims to prevent extraction of absolute file paths by turning absolute paths into relative paths when the `preservePaths` flag is not set to `true`. This is achieved by stripping the absolute path root from any absolute file paths contained in a tar file. For example `/home/user/.bashrc` would turn into `home/user/.bashrc`. \n\nThis logic was insufficient when file paths contained repeated path roots such as `////home/user/.bashrc`. `node-tar` would only strip a single path root from such paths. When given an absolute file path with repeating path roots, the resulting path (e.g. `///home/user/.bashrc`) would still resolve to an absolute path, thus allowing arbitrary file creation and overwrite. \n\n### Patches\n\n3.2.2 || 4.4.14 || 5.0.6 || 6.1.1\n\nNOTE: an adjacent issue [CVE-2021-32803](https://github.com/npm/node-tar/security/advisories/GHSA-r628-mhmh-qjhw) affects this release level. Please ensure you update to the latest patch levels that address CVE-2021-32803 as well if this adjacent issue affects your `node-tar` use case.\n\n### Workarounds\n\nUsers may work around this vulnerability without upgrading by creating a custom `onentry` method which sanitizes the `entry.path` or a `filter` method which removes entries with absolute paths.\n\n```js\nconst path = require('path')\nconst tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  // either add this function...\n  onentry: (entry) => {\n    if (path.isAbsolute(entry.path)) {\n      entry.path = sanitizeAbsolutePathSomehow(entry.path)\n      entry.absolute = path.resolve(entry.path)\n    }\n  },\n\n  // or this one\n  filter: (file, entry) => {\n    if (path.isAbsolute(entry.path)) {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n```\n\nUsers are encouraged to upgrade to the latest patch versions, rather than attempt to sanitize tar input themselves.","url":"https://github.com/advisories/GHSA-3jfq-g458-7qm9"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1005075,"path":"lerna>@lerna/publish>@lerna/npm-publish>libnpmpublish>npm-registry-fetch>make-fetch-happen>cacache>tar","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"6.1.0","paths":["lerna>@lerna/add>pacote>tar","lerna>@lerna/add>pacote>cacache>tar","lerna>@lerna/add>pacote>@npmcli/run-script>node-gyp>tar","lerna>@lerna/add>pacote>npm-registry-fetch>make-fetch-happen>cacache>tar","lerna>@lerna/publish>@lerna/npm-publish>libnpmpublish>npm-registry-fetch>make-fetch-happen>cacache>tar"]}],"metadata":null,"vulnerable_versions":">=6.0.0 <6.1.1","module_name":"tar","severity":"high","github_advisory_id":"GHSA-3jfq-g458-7qm9","cves":["CVE-2021-32804"],"access":"public","patched_versions":">=6.1.1","updated":"2021-08-03T19:06:16.000Z","recommendation":"Upgrade to version 6.1.1 or later","cwe":"CWE-22","found_by":null,"deleted":null,"id":1005075,"references":"- https://github.com/npm/node-tar/security/advisories/GHSA-3jfq-g458-7qm9\n- https://github.com/npm/node-tar/commit/1f036ca23f64a547bdd6c79c1a44bc62e8115da4\n- https://www.npmjs.com/advisories/1770\n- https://www.npmjs.com/package/tar\n- https://nvd.nist.gov/vuln/detail/CVE-2021-32804\n- https://www.oracle.com/security-alerts/cpuoct2021.html\n- https://github.com/advisories/GHSA-3jfq-g458-7qm9","created":"2021-11-18T16:00:48.497Z","reported_by":null,"title":"Arbitrary File Creation/Overwrite due to insufficient absolute path sanitization","npm_advisory_id":null,"overview":"### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\n`node-tar` aims to prevent extraction of absolute file paths by turning absolute paths into relative paths when the `preservePaths` flag is not set to `true`. This is achieved by stripping the absolute path root from any absolute file paths contained in a tar file. For example `/home/user/.bashrc` would turn into `home/user/.bashrc`. \n\nThis logic was insufficient when file paths contained repeated path roots such as `////home/user/.bashrc`. `node-tar` would only strip a single path root from such paths. When given an absolute file path with repeating path roots, the resulting path (e.g. `///home/user/.bashrc`) would still resolve to an absolute path, thus allowing arbitrary file creation and overwrite. \n\n### Patches\n\n3.2.2 || 4.4.14 || 5.0.6 || 6.1.1\n\nNOTE: an adjacent issue [CVE-2021-32803](https://github.com/npm/node-tar/security/advisories/GHSA-r628-mhmh-qjhw) affects this release level. Please ensure you update to the latest patch levels that address CVE-2021-32803 as well if this adjacent issue affects your `node-tar` use case.\n\n### Workarounds\n\nUsers may work around this vulnerability without upgrading by creating a custom `onentry` method which sanitizes the `entry.path` or a `filter` method which removes entries with absolute paths.\n\n```js\nconst path = require('path')\nconst tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  // either add this function...\n  onentry: (entry) => {\n    if (path.isAbsolute(entry.path)) {\n      entry.path = sanitizeAbsolutePathSomehow(entry.path)\n      entry.absolute = path.resolve(entry.path)\n    }\n  },\n\n  // or this one\n  filter: (file, entry) => {\n    if (path.isAbsolute(entry.path)) {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n```\n\nUsers are encouraged to upgrade to the latest patch versions, rather than attempt to sanitize tar input themselves.","url":"https://github.com/advisories/GHSA-3jfq-g458-7qm9"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1005079,"path":"lerna>@lerna/add>pacote>tar","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"6.1.0","paths":["lerna>@lerna/add>pacote>tar","lerna>@lerna/add>pacote>cacache>tar","lerna>@lerna/add>pacote>@npmcli/run-script>node-gyp>tar","lerna>@lerna/add>pacote>npm-registry-fetch>make-fetch-happen>cacache>tar","lerna>@lerna/publish>@lerna/npm-publish>libnpmpublish>npm-registry-fetch>make-fetch-happen>cacache>tar"]}],"metadata":null,"vulnerable_versions":">=6.0.0 <6.1.2","module_name":"tar","severity":"high","github_advisory_id":"GHSA-r628-mhmh-qjhw","cves":["CVE-2021-32803"],"access":"public","patched_versions":">=6.1.2","updated":"2021-08-03T18:59:59.000Z","recommendation":"Upgrade to version 6.1.2 or later","cwe":"CWE-22","found_by":null,"deleted":null,"id":1005079,"references":"- https://github.com/npm/node-tar/security/advisories/GHSA-r628-mhmh-qjhw\n- https://github.com/npm/node-tar/commit/9dbdeb6df8e9dbd96fa9e84341b9d74734be6c20\n- https://www.npmjs.com/advisories/1771\n- https://nvd.nist.gov/vuln/detail/CVE-2021-32803\n- https://www.npmjs.com/package/tar\n- https://www.oracle.com/security-alerts/cpuoct2021.html\n- https://github.com/advisories/GHSA-r628-mhmh-qjhw","created":"2021-11-18T16:00:48.497Z","reported_by":null,"title":"Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning","npm_advisory_id":null,"overview":"### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\n`node-tar` aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks.  Additionally, in order to prevent unnecessary `stat` calls to determine whether a given path is a directory, paths are cached when directories are created.\n\nThis logic was insufficient when extracting tar files that contained both a directory and a symlink with the same name as the directory. This order of operations resulted in the directory being created and added to the `node-tar` directory cache. When a directory is present in the directory cache, subsequent calls to mkdir for that directory are skipped. However, this is also where `node-tar` checks for symlinks occur.\n\nBy first creating a directory, and then replacing that directory with a symlink, it was thus possible to bypass `node-tar` symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.\n\nThis issue was addressed in releases 3.2.3, 4.4.15, 5.0.7 and 6.1.2.\n\n### Patches\n\n3.2.3 || 4.4.15 || 5.0.7 || 6.1.2\n\n### Workarounds\n\nUsers may work around this vulnerability without upgrading by creating a custom `filter` method which prevents the extraction of symbolic links.\n\n```js\nconst tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  filter: (file, entry) => {\n    if (entry.type === 'SymbolicLink') {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n```\n\nUsers are encouraged to upgrade to the latest patch versions, rather than attempt to sanitize tar input themselves.","url":"https://github.com/advisories/GHSA-r628-mhmh-qjhw"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1005079,"path":"lerna>@lerna/add>pacote>cacache>tar","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"6.1.0","paths":["lerna>@lerna/add>pacote>tar","lerna>@lerna/add>pacote>cacache>tar","lerna>@lerna/add>pacote>@npmcli/run-script>node-gyp>tar","lerna>@lerna/add>pacote>npm-registry-fetch>make-fetch-happen>cacache>tar","lerna>@lerna/publish>@lerna/npm-publish>libnpmpublish>npm-registry-fetch>make-fetch-happen>cacache>tar"]}],"metadata":null,"vulnerable_versions":">=6.0.0 <6.1.2","module_name":"tar","severity":"high","github_advisory_id":"GHSA-r628-mhmh-qjhw","cves":["CVE-2021-32803"],"access":"public","patched_versions":">=6.1.2","updated":"2021-08-03T18:59:59.000Z","recommendation":"Upgrade to version 6.1.2 or later","cwe":"CWE-22","found_by":null,"deleted":null,"id":1005079,"references":"- https://github.com/npm/node-tar/security/advisories/GHSA-r628-mhmh-qjhw\n- https://github.com/npm/node-tar/commit/9dbdeb6df8e9dbd96fa9e84341b9d74734be6c20\n- https://www.npmjs.com/advisories/1771\n- https://nvd.nist.gov/vuln/detail/CVE-2021-32803\n- https://www.npmjs.com/package/tar\n- https://www.oracle.com/security-alerts/cpuoct2021.html\n- https://github.com/advisories/GHSA-r628-mhmh-qjhw","created":"2021-11-18T16:00:48.497Z","reported_by":null,"title":"Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning","npm_advisory_id":null,"overview":"### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\n`node-tar` aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks.  Additionally, in order to prevent unnecessary `stat` calls to determine whether a given path is a directory, paths are cached when directories are created.\n\nThis logic was insufficient when extracting tar files that contained both a directory and a symlink with the same name as the directory. This order of operations resulted in the directory being created and added to the `node-tar` directory cache. When a directory is present in the directory cache, subsequent calls to mkdir for that directory are skipped. However, this is also where `node-tar` checks for symlinks occur.\n\nBy first creating a directory, and then replacing that directory with a symlink, it was thus possible to bypass `node-tar` symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.\n\nThis issue was addressed in releases 3.2.3, 4.4.15, 5.0.7 and 6.1.2.\n\n### Patches\n\n3.2.3 || 4.4.15 || 5.0.7 || 6.1.2\n\n### Workarounds\n\nUsers may work around this vulnerability without upgrading by creating a custom `filter` method which prevents the extraction of symbolic links.\n\n```js\nconst tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  filter: (file, entry) => {\n    if (entry.type === 'SymbolicLink') {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n```\n\nUsers are encouraged to upgrade to the latest patch versions, rather than attempt to sanitize tar input themselves.","url":"https://github.com/advisories/GHSA-r628-mhmh-qjhw"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1005079,"path":"lerna>@lerna/add>pacote>@npmcli/run-script>node-gyp>tar","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"6.1.0","paths":["lerna>@lerna/add>pacote>tar","lerna>@lerna/add>pacote>cacache>tar","lerna>@lerna/add>pacote>@npmcli/run-script>node-gyp>tar","lerna>@lerna/add>pacote>npm-registry-fetch>make-fetch-happen>cacache>tar","lerna>@lerna/publish>@lerna/npm-publish>libnpmpublish>npm-registry-fetch>make-fetch-happen>cacache>tar"]}],"metadata":null,"vulnerable_versions":">=6.0.0 <6.1.2","module_name":"tar","severity":"high","github_advisory_id":"GHSA-r628-mhmh-qjhw","cves":["CVE-2021-32803"],"access":"public","patched_versions":">=6.1.2","updated":"2021-08-03T18:59:59.000Z","recommendation":"Upgrade to version 6.1.2 or later","cwe":"CWE-22","found_by":null,"deleted":null,"id":1005079,"references":"- https://github.com/npm/node-tar/security/advisories/GHSA-r628-mhmh-qjhw\n- https://github.com/npm/node-tar/commit/9dbdeb6df8e9dbd96fa9e84341b9d74734be6c20\n- https://www.npmjs.com/advisories/1771\n- https://nvd.nist.gov/vuln/detail/CVE-2021-32803\n- https://www.npmjs.com/package/tar\n- https://www.oracle.com/security-alerts/cpuoct2021.html\n- https://github.com/advisories/GHSA-r628-mhmh-qjhw","created":"2021-11-18T16:00:48.497Z","reported_by":null,"title":"Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning","npm_advisory_id":null,"overview":"### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\n`node-tar` aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks.  Additionally, in order to prevent unnecessary `stat` calls to determine whether a given path is a directory, paths are cached when directories are created.\n\nThis logic was insufficient when extracting tar files that contained both a directory and a symlink with the same name as the directory. This order of operations resulted in the directory being created and added to the `node-tar` directory cache. When a directory is present in the directory cache, subsequent calls to mkdir for that directory are skipped. However, this is also where `node-tar` checks for symlinks occur.\n\nBy first creating a directory, and then replacing that directory with a symlink, it was thus possible to bypass `node-tar` symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.\n\nThis issue was addressed in releases 3.2.3, 4.4.15, 5.0.7 and 6.1.2.\n\n### Patches\n\n3.2.3 || 4.4.15 || 5.0.7 || 6.1.2\n\n### Workarounds\n\nUsers may work around this vulnerability without upgrading by creating a custom `filter` method which prevents the extraction of symbolic links.\n\n```js\nconst tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  filter: (file, entry) => {\n    if (entry.type === 'SymbolicLink') {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n```\n\nUsers are encouraged to upgrade to the latest patch versions, rather than attempt to sanitize tar input themselves.","url":"https://github.com/advisories/GHSA-r628-mhmh-qjhw"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1005079,"path":"lerna>@lerna/add>pacote>npm-registry-fetch>make-fetch-happen>cacache>tar","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"6.1.0","paths":["lerna>@lerna/add>pacote>tar","lerna>@lerna/add>pacote>cacache>tar","lerna>@lerna/add>pacote>@npmcli/run-script>node-gyp>tar","lerna>@lerna/add>pacote>npm-registry-fetch>make-fetch-happen>cacache>tar","lerna>@lerna/publish>@lerna/npm-publish>libnpmpublish>npm-registry-fetch>make-fetch-happen>cacache>tar"]}],"metadata":null,"vulnerable_versions":">=6.0.0 <6.1.2","module_name":"tar","severity":"high","github_advisory_id":"GHSA-r628-mhmh-qjhw","cves":["CVE-2021-32803"],"access":"public","patched_versions":">=6.1.2","updated":"2021-08-03T18:59:59.000Z","recommendation":"Upgrade to version 6.1.2 or later","cwe":"CWE-22","found_by":null,"deleted":null,"id":1005079,"references":"- https://github.com/npm/node-tar/security/advisories/GHSA-r628-mhmh-qjhw\n- https://github.com/npm/node-tar/commit/9dbdeb6df8e9dbd96fa9e84341b9d74734be6c20\n- https://www.npmjs.com/advisories/1771\n- https://nvd.nist.gov/vuln/detail/CVE-2021-32803\n- https://www.npmjs.com/package/tar\n- https://www.oracle.com/security-alerts/cpuoct2021.html\n- https://github.com/advisories/GHSA-r628-mhmh-qjhw","created":"2021-11-18T16:00:48.497Z","reported_by":null,"title":"Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning","npm_advisory_id":null,"overview":"### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\n`node-tar` aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks.  Additionally, in order to prevent unnecessary `stat` calls to determine whether a given path is a directory, paths are cached when directories are created.\n\nThis logic was insufficient when extracting tar files that contained both a directory and a symlink with the same name as the directory. This order of operations resulted in the directory being created and added to the `node-tar` directory cache. When a directory is present in the directory cache, subsequent calls to mkdir for that directory are skipped. However, this is also where `node-tar` checks for symlinks occur.\n\nBy first creating a directory, and then replacing that directory with a symlink, it was thus possible to bypass `node-tar` symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.\n\nThis issue was addressed in releases 3.2.3, 4.4.15, 5.0.7 and 6.1.2.\n\n### Patches\n\n3.2.3 || 4.4.15 || 5.0.7 || 6.1.2\n\n### Workarounds\n\nUsers may work around this vulnerability without upgrading by creating a custom `filter` method which prevents the extraction of symbolic links.\n\n```js\nconst tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  filter: (file, entry) => {\n    if (entry.type === 'SymbolicLink') {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n```\n\nUsers are encouraged to upgrade to the latest patch versions, rather than attempt to sanitize tar input themselves.","url":"https://github.com/advisories/GHSA-r628-mhmh-qjhw"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1005079,"path":"lerna>@lerna/publish>@lerna/npm-publish>libnpmpublish>npm-registry-fetch>make-fetch-happen>cacache>tar","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"6.1.0","paths":["lerna>@lerna/add>pacote>tar","lerna>@lerna/add>pacote>cacache>tar","lerna>@lerna/add>pacote>@npmcli/run-script>node-gyp>tar","lerna>@lerna/add>pacote>npm-registry-fetch>make-fetch-happen>cacache>tar","lerna>@lerna/publish>@lerna/npm-publish>libnpmpublish>npm-registry-fetch>make-fetch-happen>cacache>tar"]}],"metadata":null,"vulnerable_versions":">=6.0.0 <6.1.2","module_name":"tar","severity":"high","github_advisory_id":"GHSA-r628-mhmh-qjhw","cves":["CVE-2021-32803"],"access":"public","patched_versions":">=6.1.2","updated":"2021-08-03T18:59:59.000Z","recommendation":"Upgrade to version 6.1.2 or later","cwe":"CWE-22","found_by":null,"deleted":null,"id":1005079,"references":"- https://github.com/npm/node-tar/security/advisories/GHSA-r628-mhmh-qjhw\n- https://github.com/npm/node-tar/commit/9dbdeb6df8e9dbd96fa9e84341b9d74734be6c20\n- https://www.npmjs.com/advisories/1771\n- https://nvd.nist.gov/vuln/detail/CVE-2021-32803\n- https://www.npmjs.com/package/tar\n- https://www.oracle.com/security-alerts/cpuoct2021.html\n- https://github.com/advisories/GHSA-r628-mhmh-qjhw","created":"2021-11-18T16:00:48.497Z","reported_by":null,"title":"Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning","npm_advisory_id":null,"overview":"### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\n`node-tar` aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks.  Additionally, in order to prevent unnecessary `stat` calls to determine whether a given path is a directory, paths are cached when directories are created.\n\nThis logic was insufficient when extracting tar files that contained both a directory and a symlink with the same name as the directory. This order of operations resulted in the directory being created and added to the `node-tar` directory cache. When a directory is present in the directory cache, subsequent calls to mkdir for that directory are skipped. However, this is also where `node-tar` checks for symlinks occur.\n\nBy first creating a directory, and then replacing that directory with a symlink, it was thus possible to bypass `node-tar` symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.\n\nThis issue was addressed in releases 3.2.3, 4.4.15, 5.0.7 and 6.1.2.\n\n### Patches\n\n3.2.3 || 4.4.15 || 5.0.7 || 6.1.2\n\n### Workarounds\n\nUsers may work around this vulnerability without upgrading by creating a custom `filter` method which prevents the extraction of symbolic links.\n\n```js\nconst tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  filter: (file, entry) => {\n    if (entry.type === 'SymbolicLink') {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n```\n\nUsers are encouraged to upgrade to the latest patch versions, rather than attempt to sanitize tar input themselves.","url":"https://github.com/advisories/GHSA-r628-mhmh-qjhw"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1005085,"path":"lerna>@lerna/add>pacote>@npmcli/git","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"2.0.6","paths":["lerna>@lerna/add>pacote>@npmcli/git"]}],"metadata":null,"vulnerable_versions":"<2.0.8","module_name":"@npmcli/git","severity":"moderate","github_advisory_id":"GHSA-hxwm-x553-x359","cves":[],"access":"public","patched_versions":">=2.0.8","updated":"2021-08-02T19:02:32.000Z","recommendation":"Upgrade to version 2.0.8 or later","cwe":"CWE-78","found_by":null,"deleted":null,"id":1005085,"references":"- https://github.com/npm/git/security/advisories/GHSA-hxwm-x553-x359\n- https://github.com/npm/git/pull/29\n- https://github.com/advisories/GHSA-hxwm-x553-x359","created":"2021-11-18T16:00:48.498Z","reported_by":null,"title":"Arbitrary Command Injection due to Improper Command Sanitization","npm_advisory_id":null,"overview":"### Summary\nThere exists a command injection vulnerability in `npmcli/git` versions <2.0.8 which may result in arbitrary shell command execution due to improper argument sanitization when `npmcli/git` is used to execute Git commands based on user controlled input. \n\nThe impact of this issue is possible Arbitrary Command Injection when `npmcli/git` is run with untrusted (user controlled) Git command arguments. \n\n### Impact\n\nArbitrary Command Injection\n\n### Details\n\n`npmcli/git` prior to release `2.0.8` passed user controlled input as arguments to a shell command without properly sanitizing this input. Passing unsanitized input to a shell can lead to arbitrary command injection. For example passing `git+https://github.com/npm/git; echo hello world` would trigger the shell execution of `echo hello world`.  \n\nThis issue was remediated by no longer running `npmcli/git` git commands through an intermediate shell.\n\n### Patches\n\nThis issue has been patched in release `2.0.8`\n\n### Acknowledgements\n\nThis report was reported to us by @tyage (Ierae Security) through the [GitHub Bug Bounty Program](https://bounty.github.com).\n","url":"https://github.com/advisories/GHSA-hxwm-x553-x359"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1006724,"path":"lerna>@lerna/bootstrap>@lerna/run-lifecycle>npm-lifecycle>node-gyp>request>http-signature>jsprim>json-schema","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"0.2.3","paths":["lerna>@lerna/bootstrap>@lerna/run-lifecycle>npm-lifecycle>node-gyp>request>http-signature>jsprim>json-schema","lerna>@lerna/add>@lerna/bootstrap>@lerna/run-lifecycle>npm-lifecycle>node-gyp>request>http-signature>jsprim>json-schema"]}],"metadata":null,"vulnerable_versions":"<0.4.0","module_name":"json-schema","severity":"moderate","github_advisory_id":"GHSA-896r-f27r-55mw","cves":["CVE-2021-3918"],"access":"public","patched_versions":">=0.4.0","updated":"2021-11-15T22:44:28.000Z","recommendation":"Upgrade to version 0.4.0 or later","cwe":"CWE-915","found_by":null,"deleted":null,"id":1006724,"references":"- https://nvd.nist.gov/vuln/detail/CVE-2021-3918\n- https://github.com/kriszyp/json-schema/commit/22f146111f541d9737e832823699ad3528ca7741\n- https://huntr.dev/bounties/bb6ccd63-f505-4e3a-b55f-cd2662c261a9\n- https://github.com/kriszyp/json-schema/commit/b62f1da1ff5442f23443d6be6a92d00e65cba93a\n- https://github.com/kriszyp/json-schema/commit/f6f6a3b02d667aa4ba2d5d50cc19208c4462abfa\n- https://github.com/advisories/GHSA-896r-f27r-55mw","created":"2021-11-19T21:00:41.916Z","reported_by":null,"title":"json-schema is vulnerable to Prototype Pollution","npm_advisory_id":null,"overview":"json-schema is vulnerable to Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')","url":"https://github.com/advisories/GHSA-896r-f27r-55mw"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1006724,"path":"lerna>@lerna/add>@lerna/bootstrap>@lerna/run-lifecycle>npm-lifecycle>node-gyp>request>http-signature>jsprim>json-schema","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"0.2.3","paths":["lerna>@lerna/bootstrap>@lerna/run-lifecycle>npm-lifecycle>node-gyp>request>http-signature>jsprim>json-schema","lerna>@lerna/add>@lerna/bootstrap>@lerna/run-lifecycle>npm-lifecycle>node-gyp>request>http-signature>jsprim>json-schema"]}],"metadata":null,"vulnerable_versions":"<0.4.0","module_name":"json-schema","severity":"moderate","github_advisory_id":"GHSA-896r-f27r-55mw","cves":["CVE-2021-3918"],"access":"public","patched_versions":">=0.4.0","updated":"2021-11-15T22:44:28.000Z","recommendation":"Upgrade to version 0.4.0 or later","cwe":"CWE-915","found_by":null,"deleted":null,"id":1006724,"references":"- https://nvd.nist.gov/vuln/detail/CVE-2021-3918\n- https://github.com/kriszyp/json-schema/commit/22f146111f541d9737e832823699ad3528ca7741\n- https://huntr.dev/bounties/bb6ccd63-f505-4e3a-b55f-cd2662c261a9\n- https://github.com/kriszyp/json-schema/commit/b62f1da1ff5442f23443d6be6a92d00e65cba93a\n- https://github.com/kriszyp/json-schema/commit/f6f6a3b02d667aa4ba2d5d50cc19208c4462abfa\n- https://github.com/advisories/GHSA-896r-f27r-55mw","created":"2021-11-19T21:00:41.916Z","reported_by":null,"title":"json-schema is vulnerable to Prototype Pollution","npm_advisory_id":null,"overview":"json-schema is vulnerable to Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')","url":"https://github.com/advisories/GHSA-896r-f27r-55mw"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1006754,"path":"lerna>@lerna/version>@lerna/conventional-commits>conventional-recommended-bump>meow>trim-newlines","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"3.0.0","paths":["lerna>@lerna/version>@lerna/conventional-commits>conventional-recommended-bump>meow>trim-newlines","lerna>@lerna/version>@lerna/conventional-commits>conventional-changelog-core>conventional-changelog-writer>meow>trim-newlines","lerna>@lerna/publish>@lerna/version>@lerna/conventional-commits>conventional-changelog-core>conventional-changelog-writer>meow>trim-newlines"]},{"version":"1.0.0","paths":["lerna>@lerna/version>@lerna/conventional-commits>conventional-changelog-core>get-pkg-repo>meow>trim-newlines","lerna>@lerna/publish>@lerna/version>@lerna/conventional-commits>conventional-changelog-core>get-pkg-repo>meow>trim-newlines"]}],"metadata":null,"vulnerable_versions":"<3.0.1","module_name":"trim-newlines","severity":"high","github_advisory_id":"GHSA-7p7h-4mm5-852v","cves":["CVE-2021-33623"],"access":"public","patched_versions":">=3.0.1","updated":"2021-06-07T22:18:20.000Z","recommendation":"Upgrade to version 3.0.1 or later","cwe":"CWE-400","found_by":null,"deleted":null,"id":1006754,"references":"- https://nvd.nist.gov/vuln/detail/CVE-2021-33623\n- https://github.com/sindresorhus/trim-newlines/commit/25246c6ce5eea1c82d448998733a6302a4350d91\n- https://github.com/sindresorhus/trim-newlines/releases/tag/v4.0.1\n- https://www.npmjs.com/package/trim-newlines\n- https://security.netapp.com/advisory/ntap-20210702-0007/\n- https://github.com/advisories/GHSA-7p7h-4mm5-852v","created":"2021-12-02T18:00:41.924Z","reported_by":null,"title":"Regular Expression Denial of Service in trim-newlines","npm_advisory_id":null,"overview":"The trim-newlines package before 3.0.1 and 4.x before 4.0.1 for Node.js has an issue related to regular expression denial-of-service (ReDoS) for the .end() method.","url":"https://github.com/advisories/GHSA-7p7h-4mm5-852v"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1006754,"path":"lerna>@lerna/version>@lerna/conventional-commits>conventional-changelog-core>conventional-changelog-writer>meow>trim-newlines","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"3.0.0","paths":["lerna>@lerna/version>@lerna/conventional-commits>conventional-recommended-bump>meow>trim-newlines","lerna>@lerna/version>@lerna/conventional-commits>conventional-changelog-core>conventional-changelog-writer>meow>trim-newlines","lerna>@lerna/publish>@lerna/version>@lerna/conventional-commits>conventional-changelog-core>conventional-changelog-writer>meow>trim-newlines"]},{"version":"1.0.0","paths":["lerna>@lerna/version>@lerna/conventional-commits>conventional-changelog-core>get-pkg-repo>meow>trim-newlines","lerna>@lerna/publish>@lerna/version>@lerna/conventional-commits>conventional-changelog-core>get-pkg-repo>meow>trim-newlines"]}],"metadata":null,"vulnerable_versions":"<3.0.1","module_name":"trim-newlines","severity":"high","github_advisory_id":"GHSA-7p7h-4mm5-852v","cves":["CVE-2021-33623"],"access":"public","patched_versions":">=3.0.1","updated":"2021-06-07T22:18:20.000Z","recommendation":"Upgrade to version 3.0.1 or later","cwe":"CWE-400","found_by":null,"deleted":null,"id":1006754,"references":"- https://nvd.nist.gov/vuln/detail/CVE-2021-33623\n- https://github.com/sindresorhus/trim-newlines/commit/25246c6ce5eea1c82d448998733a6302a4350d91\n- https://github.com/sindresorhus/trim-newlines/releases/tag/v4.0.1\n- https://www.npmjs.com/package/trim-newlines\n- https://security.netapp.com/advisory/ntap-20210702-0007/\n- https://github.com/advisories/GHSA-7p7h-4mm5-852v","created":"2021-12-02T18:00:41.924Z","reported_by":null,"title":"Regular Expression Denial of Service in trim-newlines","npm_advisory_id":null,"overview":"The trim-newlines package before 3.0.1 and 4.x before 4.0.1 for Node.js has an issue related to regular expression denial-of-service (ReDoS) for the .end() method.","url":"https://github.com/advisories/GHSA-7p7h-4mm5-852v"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1006754,"path":"lerna>@lerna/publish>@lerna/version>@lerna/conventional-commits>conventional-changelog-core>conventional-changelog-writer>meow>trim-newlines","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"3.0.0","paths":["lerna>@lerna/version>@lerna/conventional-commits>conventional-recommended-bump>meow>trim-newlines","lerna>@lerna/version>@lerna/conventional-commits>conventional-changelog-core>conventional-changelog-writer>meow>trim-newlines","lerna>@lerna/publish>@lerna/version>@lerna/conventional-commits>conventional-changelog-core>conventional-changelog-writer>meow>trim-newlines"]},{"version":"1.0.0","paths":["lerna>@lerna/version>@lerna/conventional-commits>conventional-changelog-core>get-pkg-repo>meow>trim-newlines","lerna>@lerna/publish>@lerna/version>@lerna/conventional-commits>conventional-changelog-core>get-pkg-repo>meow>trim-newlines"]}],"metadata":null,"vulnerable_versions":"<3.0.1","module_name":"trim-newlines","severity":"high","github_advisory_id":"GHSA-7p7h-4mm5-852v","cves":["CVE-2021-33623"],"access":"public","patched_versions":">=3.0.1","updated":"2021-06-07T22:18:20.000Z","recommendation":"Upgrade to version 3.0.1 or later","cwe":"CWE-400","found_by":null,"deleted":null,"id":1006754,"references":"- https://nvd.nist.gov/vuln/detail/CVE-2021-33623\n- https://github.com/sindresorhus/trim-newlines/commit/25246c6ce5eea1c82d448998733a6302a4350d91\n- https://github.com/sindresorhus/trim-newlines/releases/tag/v4.0.1\n- https://www.npmjs.com/package/trim-newlines\n- https://security.netapp.com/advisory/ntap-20210702-0007/\n- https://github.com/advisories/GHSA-7p7h-4mm5-852v","created":"2021-12-02T18:00:41.924Z","reported_by":null,"title":"Regular Expression Denial of Service in trim-newlines","npm_advisory_id":null,"overview":"The trim-newlines package before 3.0.1 and 4.x before 4.0.1 for Node.js has an issue related to regular expression denial-of-service (ReDoS) for the .end() method.","url":"https://github.com/advisories/GHSA-7p7h-4mm5-852v"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1006754,"path":"lerna>@lerna/version>@lerna/conventional-commits>conventional-changelog-core>get-pkg-repo>meow>trim-newlines","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"3.0.0","paths":["lerna>@lerna/version>@lerna/conventional-commits>conventional-recommended-bump>meow>trim-newlines","lerna>@lerna/version>@lerna/conventional-commits>conventional-changelog-core>conventional-changelog-writer>meow>trim-newlines","lerna>@lerna/publish>@lerna/version>@lerna/conventional-commits>conventional-changelog-core>conventional-changelog-writer>meow>trim-newlines"]},{"version":"1.0.0","paths":["lerna>@lerna/version>@lerna/conventional-commits>conventional-changelog-core>get-pkg-repo>meow>trim-newlines","lerna>@lerna/publish>@lerna/version>@lerna/conventional-commits>conventional-changelog-core>get-pkg-repo>meow>trim-newlines"]}],"metadata":null,"vulnerable_versions":"<3.0.1","module_name":"trim-newlines","severity":"high","github_advisory_id":"GHSA-7p7h-4mm5-852v","cves":["CVE-2021-33623"],"access":"public","patched_versions":">=3.0.1","updated":"2021-06-07T22:18:20.000Z","recommendation":"Upgrade to version 3.0.1 or later","cwe":"CWE-400","found_by":null,"deleted":null,"id":1006754,"references":"- https://nvd.nist.gov/vuln/detail/CVE-2021-33623\n- https://github.com/sindresorhus/trim-newlines/commit/25246c6ce5eea1c82d448998733a6302a4350d91\n- https://github.com/sindresorhus/trim-newlines/releases/tag/v4.0.1\n- https://www.npmjs.com/package/trim-newlines\n- https://security.netapp.com/advisory/ntap-20210702-0007/\n- https://github.com/advisories/GHSA-7p7h-4mm5-852v","created":"2021-12-02T18:00:41.924Z","reported_by":null,"title":"Regular Expression Denial of Service in trim-newlines","npm_advisory_id":null,"overview":"The trim-newlines package before 3.0.1 and 4.x before 4.0.1 for Node.js has an issue related to regular expression denial-of-service (ReDoS) for the .end() method.","url":"https://github.com/advisories/GHSA-7p7h-4mm5-852v"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1006754,"path":"lerna>@lerna/publish>@lerna/version>@lerna/conventional-commits>conventional-changelog-core>get-pkg-repo>meow>trim-newlines","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"3.0.0","paths":["lerna>@lerna/version>@lerna/conventional-commits>conventional-recommended-bump>meow>trim-newlines","lerna>@lerna/version>@lerna/conventional-commits>conventional-changelog-core>conventional-changelog-writer>meow>trim-newlines","lerna>@lerna/publish>@lerna/version>@lerna/conventional-commits>conventional-changelog-core>conventional-changelog-writer>meow>trim-newlines"]},{"version":"1.0.0","paths":["lerna>@lerna/version>@lerna/conventional-commits>conventional-changelog-core>get-pkg-repo>meow>trim-newlines","lerna>@lerna/publish>@lerna/version>@lerna/conventional-commits>conventional-changelog-core>get-pkg-repo>meow>trim-newlines"]}],"metadata":null,"vulnerable_versions":"<3.0.1","module_name":"trim-newlines","severity":"high","github_advisory_id":"GHSA-7p7h-4mm5-852v","cves":["CVE-2021-33623"],"access":"public","patched_versions":">=3.0.1","updated":"2021-06-07T22:18:20.000Z","recommendation":"Upgrade to version 3.0.1 or later","cwe":"CWE-400","found_by":null,"deleted":null,"id":1006754,"references":"- https://nvd.nist.gov/vuln/detail/CVE-2021-33623\n- https://github.com/sindresorhus/trim-newlines/commit/25246c6ce5eea1c82d448998733a6302a4350d91\n- https://github.com/sindresorhus/trim-newlines/releases/tag/v4.0.1\n- https://www.npmjs.com/package/trim-newlines\n- https://security.netapp.com/advisory/ntap-20210702-0007/\n- https://github.com/advisories/GHSA-7p7h-4mm5-852v","created":"2021-12-02T18:00:41.924Z","reported_by":null,"title":"Regular Expression Denial of Service in trim-newlines","npm_advisory_id":null,"overview":"The trim-newlines package before 3.0.1 and 4.x before 4.0.1 for Node.js has an issue related to regular expression denial-of-service (ReDoS) for the .end() method.","url":"https://github.com/advisories/GHSA-7p7h-4mm5-852v"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1005058,"path":"lerna>@lerna/version>@lerna/conventional-commits>conventional-changelog-core>conventional-commits-parser>trim-off-newlines","dev":false,"bundled":false,"optional":false},"advisory":{"findings":[{"version":"1.0.1","paths":["lerna>@lerna/version>@lerna/conventional-commits>conventional-changelog-core>conventional-commits-parser>trim-off-newlines","lerna>@lerna/publish>@lerna/version>@lerna/conventional-commits>conventional-changelog-core>conventional-commits-parser>trim-off-newlines"]}],"metadata":null,"vulnerable_versions":"<=1.0.1","module_name":"trim-off-newlines","severity":"moderate","github_advisory_id":"GHSA-38fc-wpqx-33j7","cves":["CVE-2021-23425"],"access":"public","patched_versions":"<0.0.0","updated":"2021-08-26T14:52:20.000Z","recommendation":"None","cwe":"CWE-400","found_by":null,"deleted":null,"id":1005058,"references":"- https://nvd.nist.gov/vuln/detail/CVE-2021-23425\n- https://github.com/stevemao/trim-off-newlines/blob/master/index.js%23L6\n- https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1567197\n- https://snyk.io/vuln/SNYK-JS-TRIMOFFNEWLINES-1296850\n- https://github.com/stevemao/trim-off-newlines/pull/3\n- https://github.com/advisories/GHSA-38fc-wpqx-33j7","created":"2021-11-18T16:00:48.495Z","reported_by":null,"title":"Uncontrolled Resource Consumption in trim-off-newlines","npm_advisory_id":null,"overview":"All versions of package trim-off-newlines are vulnerable to Regular Expression Denial of Service (ReDoS) via string processing.","url":"https://github.com/advisories/GHSA-38fc-wpqx-33j7"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1005058,"path":"lerna>@lerna/publish>@lerna/version>@lerna/conventional-commits>conventional-changelog-core>conventional-commits-parser>trim-off-newlines","dev":false,"bundled":false,"optional":false},"advisory":{"findings":[{"version":"1.0.1","paths":["lerna>@lerna/version>@lerna/conventional-commits>conventional-changelog-core>conventional-commits-parser>trim-off-newlines","lerna>@lerna/publish>@lerna/version>@lerna/conventional-commits>conventional-changelog-core>conventional-commits-parser>trim-off-newlines"]}],"metadata":null,"vulnerable_versions":"<=1.0.1","module_name":"trim-off-newlines","severity":"moderate","github_advisory_id":"GHSA-38fc-wpqx-33j7","cves":["CVE-2021-23425"],"access":"public","patched_versions":"<0.0.0","updated":"2021-08-26T14:52:20.000Z","recommendation":"None","cwe":"CWE-400","found_by":null,"deleted":null,"id":1005058,"references":"- https://nvd.nist.gov/vuln/detail/CVE-2021-23425\n- https://github.com/stevemao/trim-off-newlines/blob/master/index.js%23L6\n- https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1567197\n- https://snyk.io/vuln/SNYK-JS-TRIMOFFNEWLINES-1296850\n- https://github.com/stevemao/trim-off-newlines/pull/3\n- https://github.com/advisories/GHSA-38fc-wpqx-33j7","created":"2021-11-18T16:00:48.495Z","reported_by":null,"title":"Uncontrolled Resource Consumption in trim-off-newlines","npm_advisory_id":null,"overview":"All versions of package trim-off-newlines are vulnerable to Regular Expression Denial of Service (ReDoS) via string processing.","url":"https://github.com/advisories/GHSA-38fc-wpqx-33j7"}}}
{"type":"auditSummary","data":{"vulnerabilities":{"info":0,"low":0,"moderate":16,"high":30,"critical":0},"dependencies":785,"devDependencies":0,"optionalDependencies":0,"totalDependencies":785}}
