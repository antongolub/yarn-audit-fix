import { SpawnSyncReturns } from 'child_process'
import { keyBy } from 'lodash-es'
import sv from 'semver'

import {
  TAuditEntry,
  TAuditReport,
  TContext, TFlags,
  TLockfileObject
} from './ifaces'

import {
  attempt,
  formatFlags,
  getNpm,
  getYarn,
  invoke,
  mapFlags,
  parseYaml,
  formatYaml
} from './util'


export const parse = (raw: string): TLockfileObject => {
  const data = parseYaml(raw)
  delete data.__metadata

  return Object.entries(data).reduce<Record<string, any>>((m, [key, value]: [string, any]) => {
    key.replaceAll('@npm:', '@').split(', ').forEach(k => {
      m[k] = value
    })
    return m
  }, {})
}

export const format = (lockfile: TLockfileObject): string => {
    const keymap = Object.entries(lockfile).reduce<Record<string, any>>((m, [k, {resolution}]) => {
      const entry = m[resolution] || (m[resolution] = [])
      entry.push(k.replace(/(?<!^)@/, '@npm:'))

      return m
    }, {})

    const data = Object.values(lockfile).reduce<Record<string, any>>((m, value) => {
      const key = keymap[value.resolution].join(', ')
      m[key] = value

      return m
    }, {
      __metadata: {
        version: 5,
        cacheKey: 8
      }
    })

    return `# This file is generated by running "yarn install" inside your project.
# Manual changes might be lost - proceed with caution!

${formatYaml(data, {quotingType: '"', flowLevel: -1, lineWidth: -1}).replace(/\n"/g, '\n\n"')} 
`
}

export const audit = (flags: TFlags, temp: string): TAuditReport => {
  const cmd = flags.reporter === 'npm' ? getNpm(flags['npm-path']) : getYarn()
  const mapping = {
    'audit-level': 'level',
    only: {
      key: 'groups',
      values: {
        prod: 'dependencies',
        dev: 'devDependencies',
      },
    },
  }
  const _flags = formatFlags(
    mapFlags(flags, mapping),
    'groups',
    'verbose',
    'level',
  )
  const report = invoke(
    cmd,
    ['audit', '--json', ..._flags],
    temp,
    !!flags.silent,
    false,
    true,
  )

  return parseAuditReport(report)
}

export const parseAuditReport = (
  data: string | SpawnSyncReturns<Buffer>,
): TAuditReport =>
  keyBy(
    data
      .toString()
      .split('\n')
      .map((item) => attempt(() => JSON.parse(item)) as TAuditEntry)
      .map((item) => item?.data?.advisory)
      .filter((item) => item !== undefined)
      .map((item) => ({
        module_name: item.module_name,
        vulnerable_versions: item.vulnerable_versions,
        patched_versions: item.patched_versions,
      })),
    (item) => item.module_name,
  )
